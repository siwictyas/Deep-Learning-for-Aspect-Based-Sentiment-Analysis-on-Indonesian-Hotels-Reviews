{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Sentiment - Pelayanan","provenance":[],"collapsed_sections":["EJ64PtWnBddd","CeE3j9-cZ9sk","QAWMLTwmZ5Cb","6hT6gKM48NOn","1zAaGMepBh__"],"mount_file_id":"1p3TJKgUCzFYstfpF0u24sii_LvK78pmA","authorship_tag":"ABX9TyNgTOLrFR0YXb1vdYTqZke7"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","metadata":{"id":"2-qyyxYZSMyF","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1632300368748,"user_tz":-420,"elapsed":3121,"user":{"displayName":"SIWI CAHYANINGTYAS","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17820712209128539889"}},"outputId":"0ee06861-a7ec-4db3-f439-23deb83e4b08"},"source":["import keras\n","import numpy as np\n","import pandas as pd\n","import openpyxl\n","from keras.preprocessing.text import Tokenizer\n","from keras.preprocessing.sequence import pad_sequences\n","from keras.models import load_model\n","from nltk.corpus import stopwords\n","from nltk.tokenize import word_tokenize\n","import unicodedata\n","from collections import Counter\n","from imblearn.under_sampling import RandomUnderSampler\n","import matplotlib.pyplot as plt\n","%matplotlib inline\n","import seaborn as sns\n","from sklearn.metrics import confusion_matrix\n","import warnings\n","import tensorflow as tf\n","warnings.simplefilter(action='ignore', category=FutureWarning)\n","np.random.seed(0)"],"execution_count":1,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/sklearn/externals/six.py:31: FutureWarning: The module is deprecated in version 0.21 and will be removed in version 0.23 since we've dropped support for Python 2.7. Please rely on the official version of six (https://pypi.org/project/six/).\n","  \"(https://pypi.org/project/six/).\", FutureWarning)\n","/usr/local/lib/python3.7/dist-packages/sklearn/utils/deprecation.py:144: FutureWarning: The sklearn.neighbors.base module is  deprecated in version 0.22 and will be removed in version 0.24. The corresponding classes / functions should instead be imported from sklearn.neighbors. Anything that cannot be imported from sklearn.neighbors is now part of the private API.\n","  warnings.warn(message, FutureWarning)\n"]}]},{"cell_type":"markdown","metadata":{"id":"jCh20tTkBoF-"},"source":["# Data"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":0},"id":"N7fAJvKISNR2","executionInfo":{"status":"ok","timestamp":1632300370782,"user_tz":-420,"elapsed":2040,"user":{"displayName":"SIWI CAHYANINGTYAS","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17820712209128539889"}},"outputId":"2d8967c4-66ac-4f5b-ae19-301e63e5155b"},"source":["df = pd.read_excel('/content/drive/My Drive/Thesis/Code/Dataset/Used/data_training.xlsx', usecols=[\"clean text\",\"aspect\",\"sentiment\"])\n","df.head()"],"execution_count":2,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>clean text</th>\n","      <th>aspect</th>\n","      <th>sentiment</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>shuttle gratis malioboro</td>\n","      <td>harga</td>\n","      <td>positive</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>dapat gratis course golf</td>\n","      <td>harga</td>\n","      <td>positive</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>gratis andong keliling</td>\n","      <td>harga</td>\n","      <td>positive</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>sesuai harga</td>\n","      <td>harga</td>\n","      <td>positive</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>harga terjangkau</td>\n","      <td>harga</td>\n","      <td>positive</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                 clean text aspect sentiment\n","0  shuttle gratis malioboro  harga  positive\n","1  dapat gratis course golf  harga  positive\n","2    gratis andong keliling  harga  positive\n","3              sesuai harga  harga  positive\n","4          harga terjangkau  harga  positive"]},"metadata":{},"execution_count":2}]},{"cell_type":"code","metadata":{"id":"wLSH6SnfSUsk","executionInfo":{"status":"ok","timestamp":1632300370783,"user_tz":-420,"elapsed":25,"user":{"displayName":"SIWI CAHYANINGTYAS","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17820712209128539889"}}},"source":["df = df.drop_duplicates()"],"execution_count":3,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":0},"id":"KQ-Ft7mQSXwt","executionInfo":{"status":"ok","timestamp":1632300370784,"user_tz":-420,"elapsed":25,"user":{"displayName":"SIWI CAHYANINGTYAS","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17820712209128539889"}},"outputId":"af34a537-d37a-4557-ba92-26734c24d248"},"source":["df = df.dropna()\n","df.reset_index(drop=True)"],"execution_count":4,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>clean text</th>\n","      <th>aspect</th>\n","      <th>sentiment</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>shuttle gratis malioboro</td>\n","      <td>harga</td>\n","      <td>positive</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>dapat gratis course golf</td>\n","      <td>harga</td>\n","      <td>positive</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>gratis andong keliling</td>\n","      <td>harga</td>\n","      <td>positive</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>sesuai harga</td>\n","      <td>harga</td>\n","      <td>positive</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>harga terjangkau</td>\n","      <td>harga</td>\n","      <td>positive</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>5653</th>\n","      <td>staff jutek bentak_bentak marah</td>\n","      <td>pelayanan</td>\n","      <td>negative</td>\n","    </tr>\n","    <tr>\n","      <th>5654</th>\n","      <td>staff mengatur parkir marah_marah</td>\n","      <td>pelayanan</td>\n","      <td>negative</td>\n","    </tr>\n","    <tr>\n","      <th>5655</th>\n","      <td>sajian sarapan lambat refill</td>\n","      <td>pelayanan</td>\n","      <td>negative</td>\n","    </tr>\n","    <tr>\n","      <th>5656</th>\n","      <td>tidak_ada prokes terjaga tidak_ada social_dist...</td>\n","      <td>pelayanan</td>\n","      <td>negative</td>\n","    </tr>\n","    <tr>\n","      <th>5657</th>\n","      <td>staff tidak_ramah tidak_paham sop</td>\n","      <td>pelayanan</td>\n","      <td>negative</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5658 rows Ã— 3 columns</p>\n","</div>"],"text/plain":["                                             clean text     aspect sentiment\n","0                              shuttle gratis malioboro      harga  positive\n","1                              dapat gratis course golf      harga  positive\n","2                                gratis andong keliling      harga  positive\n","3                                          sesuai harga      harga  positive\n","4                                      harga terjangkau      harga  positive\n","...                                                 ...        ...       ...\n","5653                    staff jutek bentak_bentak marah  pelayanan  negative\n","5654                  staff mengatur parkir marah_marah  pelayanan  negative\n","5655                       sajian sarapan lambat refill  pelayanan  negative\n","5656  tidak_ada prokes terjaga tidak_ada social_dist...  pelayanan  negative\n","5657                  staff tidak_ramah tidak_paham sop  pelayanan  negative\n","\n","[5658 rows x 3 columns]"]},"metadata":{},"execution_count":4}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6DUF0jjkSZa4","executionInfo":{"status":"ok","timestamp":1632300370785,"user_tz":-420,"elapsed":23,"user":{"displayName":"SIWI CAHYANINGTYAS","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17820712209128539889"}},"outputId":"1a3cff85-a1ec-48e3-9831-4a790ef1746c"},"source":["df.sentiment.value_counts()"],"execution_count":5,"outputs":[{"output_type":"execute_result","data":{"text/plain":["positive    2905\n","negative    2753\n","Name: sentiment, dtype: int64"]},"metadata":{},"execution_count":5}]},{"cell_type":"code","metadata":{"id":"SmH2XLrJSa6a","executionInfo":{"status":"ok","timestamp":1632300370786,"user_tz":-420,"elapsed":22,"user":{"displayName":"SIWI CAHYANINGTYAS","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17820712209128539889"}}},"source":["df_train = df.sample(frac = 1) #shuffle"],"execution_count":6,"outputs":[]},{"cell_type":"code","metadata":{"id":"Hk9ggR7JScx9","executionInfo":{"status":"ok","timestamp":1632300370787,"user_tz":-420,"elapsed":22,"user":{"displayName":"SIWI CAHYANINGTYAS","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17820712209128539889"}}},"source":["# clean_text = df_train[[\"clean text\",\"aspect\",\"sentiment\"]]\n","# wo_punc_text = df_train[\"text_wo_punc\"]\n","# wo_neg_text = df_train[\"text_wo_neg\"]\n","# stemming = df_train[\"stemming\"]\n","# label = df_train[\"sentiment\"]"],"execution_count":7,"outputs":[]},{"cell_type":"code","metadata":{"id":"I2cy3RgtKHi4","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1632300370788,"user_tz":-420,"elapsed":23,"user":{"displayName":"SIWI CAHYANINGTYAS","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17820712209128539889"}},"outputId":"bbe327bb-923c-448d-fef7-c75177ad94cf"},"source":["t = df_train[df_train[\"aspect\"]==\"pelayanan\"]\n","text = t[\"clean text\"] \n","label = t[\"sentiment\"]\n","print(t)"],"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["                                             clean text     aspect sentiment\n","2744                      staff hotel ramah cukup bantu  pelayanan  positive\n","2609                              staff ramah aspiratif  pelayanan  positive\n","5475  front_office tidak_mau terima saran terutama o...  pelayanan  negative\n","2545                              pelayanan sopan ramah  pelayanan  positive\n","5506              booking room dkasih room ada orangnya  pelayanan  negative\n","...                                                 ...        ...       ...\n","2920                      satpam baik selalu buka pintu  pelayanan  positive\n","2924                                  prokes dijalankan  pelayanan  positive\n","2624                                     mbak mas ramah  pelayanan  positive\n","2632             penuh hotel tetap refill makanan habis  pelayanan  positive\n","2759                 pelayanan luar_biasa ada mas ikbal  pelayanan  positive\n","\n","[853 rows x 3 columns]\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":0},"id":"9Gek0xZR2Wbq","executionInfo":{"status":"ok","timestamp":1632300370788,"user_tz":-420,"elapsed":22,"user":{"displayName":"SIWI CAHYANINGTYAS","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17820712209128539889"}},"outputId":"cbe38837-61f6-4488-e9f1-c1430ebed599"},"source":["t.sentiment.value_counts().plot(kind='bar', title='Count (target)');\n","print(t.sentiment.value_counts())"],"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["positive    433\n","negative    420\n","Name: sentiment, dtype: int64\n"]},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"Wq6wLNiOSfP3"},"source":["# Modelling"]},{"cell_type":"markdown","metadata":{"id":"Jkk7TrKBAous"},"source":["## Neural Network"]},{"cell_type":"markdown","metadata":{"id":"cBwwrNpv-0_2"},"source":["### Var"]},{"cell_type":"code","metadata":{"id":"7Iqx73ywSepp","executionInfo":{"status":"ok","timestamp":1632300370789,"user_tz":-420,"elapsed":21,"user":{"displayName":"SIWI CAHYANINGTYAS","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17820712209128539889"}}},"source":["from tensorflow.keras.models import Sequential, Model\n","from tensorflow.keras.layers import Activation, GlobalAveragePooling1D, GlobalMaxPooling1D, BatchNormalization, Concatenate, Input, Embedding\n","from tensorflow.keras.layers import SimpleRNN, GRU, LSTM, Attention, Dense, Dropout, Bidirectional, Flatten, Conv1D, MaxPool1D, Reshape, SpatialDropout1D, UpSampling1D, Layer\n","from tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint\n","from tensorflow.keras import initializers, regularizers, constraints, optimizers, layers\n","from tensorflow.keras.regularizers import l2\n","import keras.backend as K\n","import os\n","from keras import callbacks"],"execution_count":10,"outputs":[]},{"cell_type":"code","metadata":{"id":"FZYsqeqF6M35","executionInfo":{"status":"ok","timestamp":1632300371321,"user_tz":-420,"elapsed":552,"user":{"displayName":"SIWI CAHYANINGTYAS","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17820712209128539889"}}},"source":["earlystopping = callbacks.EarlyStopping(monitor =\"val_loss\", \n","                                        mode =\"min\", patience = 5, \n","                                        restore_best_weights = True)"],"execution_count":11,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_BOmSXv1TEG2","executionInfo":{"status":"ok","timestamp":1632300373950,"user_tz":-420,"elapsed":2634,"user":{"displayName":"SIWI CAHYANINGTYAS","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17820712209128539889"}},"outputId":"133f7b30-7a55-438f-ddd0-a459d3fa3c7e"},"source":["pip install keras_self_attention"],"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: keras_self_attention in /usr/local/lib/python3.7/dist-packages (0.50.0)\n","Requirement already satisfied: Keras in /usr/local/lib/python3.7/dist-packages (from keras_self_attention) (2.6.0)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.7/dist-packages (from keras_self_attention) (1.19.5)\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1A0quJ_fTGeY","executionInfo":{"status":"ok","timestamp":1632300373951,"user_tz":-420,"elapsed":17,"user":{"displayName":"SIWI CAHYANINGTYAS","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17820712209128539889"}},"outputId":"2e451b30-e8a8-4e7d-c107-87446569c39c"},"source":["max_features =20000\n","tokenizer = Tokenizer() \n","tokenizer.fit_on_texts(text.values) \n","max_seq_len = max([len(i.split()) for i in text])\n","\n","X = tokenizer.texts_to_sequences(text.values)\n","X = pad_sequences(X, maxlen=max_seq_len)\n","Y = pd.get_dummies(label).values\n","print(\"Shape of data tensor:\", X.shape)\n","print(\"Shape of label tensor:\",Y.shape)"],"execution_count":13,"outputs":[{"output_type":"stream","name":"stdout","text":["Shape of data tensor: (853, 14)\n","Shape of label tensor: (853, 2)\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YRC7t6pEFFnj","executionInfo":{"status":"ok","timestamp":1632300373951,"user_tz":-420,"elapsed":10,"user":{"displayName":"SIWI CAHYANINGTYAS","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17820712209128539889"}},"outputId":"64d4e5e1-83b2-4880-dd66-2e7e5aef700d"},"source":["print(Y)"],"execution_count":14,"outputs":[{"output_type":"stream","name":"stdout","text":["[[0 1]\n"," [0 1]\n"," [1 0]\n"," ...\n"," [0 1]\n"," [0 1]\n"," [0 1]]\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3RE2kylSFOVy","executionInfo":{"status":"ok","timestamp":1632300373952,"user_tz":-420,"elapsed":9,"user":{"displayName":"SIWI CAHYANINGTYAS","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17820712209128539889"}},"outputId":"5bc704cc-78ff-4b62-b0fe-9b5cf95b08c4"},"source":["print(label)"],"execution_count":15,"outputs":[{"output_type":"stream","name":"stdout","text":["2744    positive\n","2609    positive\n","5475    negative\n","2545    positive\n","5506    negative\n","          ...   \n","2920    positive\n","2924    positive\n","2624    positive\n","2632    positive\n","2759    positive\n","Name: sentiment, Length: 853, dtype: object\n"]}]},{"cell_type":"code","metadata":{"id":"Q6s50objTIlr","executionInfo":{"status":"ok","timestamp":1632300373952,"user_tz":-420,"elapsed":8,"user":{"displayName":"SIWI CAHYANINGTYAS","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17820712209128539889"}}},"source":["from sklearn.model_selection import train_test_split\n","\n","X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size = 0.33, random_state = 0)"],"execution_count":16,"outputs":[]},{"cell_type":"code","metadata":{"id":"q9WgthpgNToG","executionInfo":{"status":"ok","timestamp":1632300373953,"user_tz":-420,"elapsed":9,"user":{"displayName":"SIWI CAHYANINGTYAS","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17820712209128539889"}}},"source":["unit = 100\n","dropout = 0.5\n","batch = 64\n","epoch = 100\n","output = 100"],"execution_count":17,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"DcM4p2ImTLdL"},"source":["### RNN"]},{"cell_type":"code","metadata":{"id":"oBV6f8FETKtp","executionInfo":{"status":"ok","timestamp":1632300373954,"user_tz":-420,"elapsed":10,"user":{"displayName":"SIWI CAHYANINGTYAS","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17820712209128539889"}}},"source":["def get_model_rnn(X,Y):\n","  vocab = max([len(tokenizer.word_index)])+1\n","  model_rnn = Sequential()\n","  model_rnn.add(Embedding(input_dim=vocab, output_dim=output, input_length=max_seq_len))\n","  # model_rnn.add(Dense(32, activation='relu'))\n","  model_rnn.add(SpatialDropout1D(dropout))\n","  model_rnn.add(SimpleRNN(unit))\n","  model_rnn.add(Dense(2, activation='sigmoid'))\n","  model_rnn.compile(optimizer='adam', loss='binary_crossentropy', metrics=['acc'])\n","  print(model_rnn.summary())\n","\n","  return model_rnn"],"execution_count":18,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fiBDUCglTQJn","executionInfo":{"status":"ok","timestamp":1632300377168,"user_tz":-420,"elapsed":3223,"user":{"displayName":"SIWI CAHYANINGTYAS","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17820712209128539889"}},"outputId":"a15d72a4-a957-47a1-c7a0-ff410ff4b2f3"},"source":["m_rnn = get_model_rnn(X_train, Y_train)\n","history_RNN = m_rnn.fit(X_train, Y_train,\n","                      epochs=epoch,batch_size=batch,\n","                      validation_split=0.2, callbacks =[earlystopping])"],"execution_count":19,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","embedding (Embedding)        (None, 14, 100)           95800     \n","_________________________________________________________________\n","spatial_dropout1d (SpatialDr (None, 14, 100)           0         \n","_________________________________________________________________\n","simple_rnn (SimpleRNN)       (None, 100)               20100     \n","_________________________________________________________________\n","dense (Dense)                (None, 2)                 202       \n","=================================================================\n","Total params: 116,102\n","Trainable params: 116,102\n","Non-trainable params: 0\n","_________________________________________________________________\n","None\n","Epoch 1/100\n","8/8 [==============================] - 1s 47ms/step - loss: 0.6934 - acc: 0.5329 - val_loss: 0.6809 - val_acc: 0.6174\n","Epoch 2/100\n","8/8 [==============================] - 0s 12ms/step - loss: 0.6622 - acc: 0.6952 - val_loss: 0.6681 - val_acc: 0.6000\n","Epoch 3/100\n","8/8 [==============================] - 0s 12ms/step - loss: 0.6289 - acc: 0.7061 - val_loss: 0.6287 - val_acc: 0.7565\n","Epoch 4/100\n","8/8 [==============================] - 0s 13ms/step - loss: 0.5727 - acc: 0.8202 - val_loss: 0.5803 - val_acc: 0.7478\n","Epoch 5/100\n","8/8 [==============================] - 0s 12ms/step - loss: 0.4846 - acc: 0.8355 - val_loss: 0.5067 - val_acc: 0.7826\n","Epoch 6/100\n","8/8 [==============================] - 0s 15ms/step - loss: 0.3834 - acc: 0.8772 - val_loss: 0.4243 - val_acc: 0.8087\n","Epoch 7/100\n","8/8 [==============================] - 0s 12ms/step - loss: 0.2967 - acc: 0.9035 - val_loss: 0.4060 - val_acc: 0.8261\n","Epoch 8/100\n","8/8 [==============================] - 0s 12ms/step - loss: 0.2194 - acc: 0.9298 - val_loss: 0.4056 - val_acc: 0.8087\n","Epoch 9/100\n","8/8 [==============================] - 0s 13ms/step - loss: 0.1931 - acc: 0.9232 - val_loss: 0.4488 - val_acc: 0.7913\n","Epoch 10/100\n","8/8 [==============================] - 0s 12ms/step - loss: 0.1646 - acc: 0.9496 - val_loss: 0.3469 - val_acc: 0.8609\n","Epoch 11/100\n","8/8 [==============================] - 0s 12ms/step - loss: 0.1230 - acc: 0.9649 - val_loss: 0.2946 - val_acc: 0.8696\n","Epoch 12/100\n","8/8 [==============================] - 0s 13ms/step - loss: 0.0953 - acc: 0.9671 - val_loss: 0.3329 - val_acc: 0.8522\n","Epoch 13/100\n","8/8 [==============================] - 0s 12ms/step - loss: 0.0946 - acc: 0.9803 - val_loss: 0.2734 - val_acc: 0.8696\n","Epoch 14/100\n","8/8 [==============================] - 0s 12ms/step - loss: 0.0720 - acc: 0.9846 - val_loss: 0.2857 - val_acc: 0.8870\n","Epoch 15/100\n","8/8 [==============================] - 0s 13ms/step - loss: 0.0705 - acc: 0.9803 - val_loss: 0.2871 - val_acc: 0.8783\n","Epoch 16/100\n","8/8 [==============================] - 0s 12ms/step - loss: 0.0524 - acc: 0.9868 - val_loss: 0.2851 - val_acc: 0.8783\n","Epoch 17/100\n","8/8 [==============================] - 0s 12ms/step - loss: 0.0478 - acc: 0.9934 - val_loss: 0.2902 - val_acc: 0.8870\n","Epoch 18/100\n","8/8 [==============================] - 0s 12ms/step - loss: 0.0344 - acc: 0.9956 - val_loss: 0.3011 - val_acc: 0.8870\n"]}]},{"cell_type":"code","metadata":{"id":"Rc0j9TxoTR-A","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1632300377714,"user_tz":-420,"elapsed":552,"user":{"displayName":"SIWI CAHYANINGTYAS","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17820712209128539889"}},"outputId":"72462867-7512-493e-a15a-1ae783d1db40"},"source":["score,acc_rnn = m_rnn.evaluate(X_test, Y_test)"],"execution_count":20,"outputs":[{"output_type":"stream","name":"stdout","text":["9/9 [==============================] - 0s 3ms/step - loss: 0.3207 - acc: 0.8617\n"]}]},{"cell_type":"code","metadata":{"id":"jWN9Q8QuTVXR","executionInfo":{"status":"ok","timestamp":1632300377715,"user_tz":-420,"elapsed":7,"user":{"displayName":"SIWI CAHYANINGTYAS","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17820712209128539889"}}},"source":["# m_rnn.save('/content/drive/My Drive/Thesis/Code/Model/rnn_sentiment_model.h5')"],"execution_count":21,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"f_XeLWSjTX9o"},"source":["### GRU"]},{"cell_type":"code","metadata":{"id":"2zuM2gB8TXN8","executionInfo":{"status":"ok","timestamp":1632300377716,"user_tz":-420,"elapsed":7,"user":{"displayName":"SIWI CAHYANINGTYAS","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17820712209128539889"}}},"source":["def get_model_gru(X,Y):\n","  vocab = max([len(tokenizer.word_index)])+1\n","  model_gru = Sequential()\n","  model_gru.add(Embedding(input_dim=vocab, output_dim=output, input_length=max_seq_len))\n","  # model_gru.add(Dense(32, activation='relu'))\n","  model_gru.add(SpatialDropout1D(dropout))\n","  model_gru.add(GRU(unit))\n","  model_gru.add(Dense(2, activation='sigmoid'))\n","  model_gru.compile(optimizer='adam', loss='binary_crossentropy', metrics=['acc'])\n","  print(model_gru.summary())\n","\n","  return model_gru"],"execution_count":22,"outputs":[]},{"cell_type":"code","metadata":{"id":"iYLfLwNYTehH","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1632300383406,"user_tz":-420,"elapsed":5697,"user":{"displayName":"SIWI CAHYANINGTYAS","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17820712209128539889"}},"outputId":"68d3f2ad-d73b-4880-ccd2-99ec40b89466"},"source":["m_gru = get_model_gru(X_train, Y_train)\n","history_GRU = m_gru.fit(X_train, Y_train,\n","                      epochs=epoch,batch_size=batch,\n","                      validation_split=0.2, callbacks =[earlystopping])"],"execution_count":23,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential_1\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","embedding_1 (Embedding)      (None, 14, 100)           95800     \n","_________________________________________________________________\n","spatial_dropout1d_1 (Spatial (None, 14, 100)           0         \n","_________________________________________________________________\n","gru (GRU)                    (None, 100)               60600     \n","_________________________________________________________________\n","dense_1 (Dense)              (None, 2)                 202       \n","=================================================================\n","Total params: 156,602\n","Trainable params: 156,602\n","Non-trainable params: 0\n","_________________________________________________________________\n","None\n","Epoch 1/100\n","8/8 [==============================] - 3s 78ms/step - loss: 0.6915 - acc: 0.4934 - val_loss: 0.6820 - val_acc: 0.5739\n","Epoch 2/100\n","8/8 [==============================] - 0s 21ms/step - loss: 0.6790 - acc: 0.6425 - val_loss: 0.6683 - val_acc: 0.7478\n","Epoch 3/100\n","8/8 [==============================] - 0s 23ms/step - loss: 0.6557 - acc: 0.7741 - val_loss: 0.6351 - val_acc: 0.7565\n","Epoch 4/100\n","8/8 [==============================] - 0s 21ms/step - loss: 0.5992 - acc: 0.8268 - val_loss: 0.5615 - val_acc: 0.7913\n","Epoch 5/100\n","8/8 [==============================] - 0s 21ms/step - loss: 0.4931 - acc: 0.8509 - val_loss: 0.4520 - val_acc: 0.8609\n","Epoch 6/100\n","8/8 [==============================] - 0s 21ms/step - loss: 0.3705 - acc: 0.8706 - val_loss: 0.3855 - val_acc: 0.8174\n","Epoch 7/100\n","8/8 [==============================] - 0s 21ms/step - loss: 0.2755 - acc: 0.9145 - val_loss: 0.3556 - val_acc: 0.8174\n","Epoch 8/100\n","8/8 [==============================] - 0s 21ms/step - loss: 0.1961 - acc: 0.9474 - val_loss: 0.3043 - val_acc: 0.8609\n","Epoch 9/100\n","8/8 [==============================] - 0s 23ms/step - loss: 0.1612 - acc: 0.9518 - val_loss: 0.3195 - val_acc: 0.8348\n","Epoch 10/100\n","8/8 [==============================] - 0s 21ms/step - loss: 0.1223 - acc: 0.9452 - val_loss: 0.2718 - val_acc: 0.8870\n","Epoch 11/100\n","8/8 [==============================] - 0s 21ms/step - loss: 0.1136 - acc: 0.9671 - val_loss: 0.2594 - val_acc: 0.8957\n","Epoch 12/100\n","8/8 [==============================] - 0s 24ms/step - loss: 0.0954 - acc: 0.9759 - val_loss: 0.2629 - val_acc: 0.8957\n","Epoch 13/100\n","8/8 [==============================] - 0s 21ms/step - loss: 0.0804 - acc: 0.9715 - val_loss: 0.2656 - val_acc: 0.8957\n","Epoch 14/100\n","8/8 [==============================] - 0s 22ms/step - loss: 0.0591 - acc: 0.9912 - val_loss: 0.2827 - val_acc: 0.8957\n","Epoch 15/100\n","8/8 [==============================] - 0s 23ms/step - loss: 0.0508 - acc: 0.9825 - val_loss: 0.3010 - val_acc: 0.8957\n","Epoch 16/100\n","8/8 [==============================] - 0s 21ms/step - loss: 0.0487 - acc: 0.9846 - val_loss: 0.3017 - val_acc: 0.8957\n"]}]},{"cell_type":"code","metadata":{"id":"l9uQanamTf88","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1632300385574,"user_tz":-420,"elapsed":2174,"user":{"displayName":"SIWI CAHYANINGTYAS","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17820712209128539889"}},"outputId":"71cb6728-dab7-4d36-87f4-04de722929cc"},"source":["score,acc_gru = m_gru.evaluate(X_test, Y_test)"],"execution_count":24,"outputs":[{"output_type":"stream","name":"stdout","text":["9/9 [==============================] - 0s 4ms/step - loss: 0.2830 - acc: 0.8865\n"]}]},{"cell_type":"code","metadata":{"id":"cOS5Ff2ZTkEX","executionInfo":{"status":"ok","timestamp":1632300385575,"user_tz":-420,"elapsed":7,"user":{"displayName":"SIWI CAHYANINGTYAS","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17820712209128539889"}}},"source":["# m_gru.save('/content/drive/My Drive/Thesis/Code/Model/gru_harga_model.h5')"],"execution_count":25,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"hcWT_dKBTmvQ"},"source":["### LSTM"]},{"cell_type":"code","metadata":{"id":"3wX4AVxuTo4H","executionInfo":{"status":"ok","timestamp":1632300385575,"user_tz":-420,"elapsed":6,"user":{"displayName":"SIWI CAHYANINGTYAS","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17820712209128539889"}}},"source":["def get_model_LSTM(X,Y):\n","  vocab = max([len(tokenizer.word_index)])+1\n","  model_LSTM = Sequential()\n","  model_LSTM.add(Embedding(input_dim=vocab, output_dim=output, input_length=max_seq_len))\n","  # model_LSTM.add(Dense(32, activation='relu'))\n","  model_LSTM.add(SpatialDropout1D(dropout))\n","  model_LSTM.add(LSTM(unit))\n","  model_LSTM.add(Dense(2, activation='sigmoid'))\n","  model_LSTM.compile(optimizer='adam', loss='binary_crossentropy', metrics=['acc'])\n","  print(model_LSTM.summary())\n","  \n","  return model_LSTM"],"execution_count":26,"outputs":[]},{"cell_type":"code","metadata":{"id":"GN-idepNTrNu","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1632300391725,"user_tz":-420,"elapsed":6156,"user":{"displayName":"SIWI CAHYANINGTYAS","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17820712209128539889"}},"outputId":"ab55fcd4-ce34-45f9-daaf-c132eaf4c8ca"},"source":["m_lstm = get_model_LSTM(X_train, Y_train)\n","history_LSTM = m_lstm.fit(X_train, Y_train,\n","                      epochs=epoch,batch_size=batch,\n","                      validation_split=0.2, callbacks =[earlystopping])"],"execution_count":27,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential_2\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","embedding_2 (Embedding)      (None, 14, 100)           95800     \n","_________________________________________________________________\n","spatial_dropout1d_2 (Spatial (None, 14, 100)           0         \n","_________________________________________________________________\n","lstm (LSTM)                  (None, 100)               80400     \n","_________________________________________________________________\n","dense_2 (Dense)              (None, 2)                 202       \n","=================================================================\n","Total params: 176,402\n","Trainable params: 176,402\n","Non-trainable params: 0\n","_________________________________________________________________\n","None\n","Epoch 1/100\n","8/8 [==============================] - 2s 81ms/step - loss: 0.6929 - acc: 0.5307 - val_loss: 0.6888 - val_acc: 0.7565\n","Epoch 2/100\n","8/8 [==============================] - 0s 24ms/step - loss: 0.6846 - acc: 0.7193 - val_loss: 0.6795 - val_acc: 0.6696\n","Epoch 3/100\n","8/8 [==============================] - 0s 25ms/step - loss: 0.6719 - acc: 0.6338 - val_loss: 0.6599 - val_acc: 0.6696\n","Epoch 4/100\n","8/8 [==============================] - 0s 23ms/step - loss: 0.6385 - acc: 0.7588 - val_loss: 0.6177 - val_acc: 0.7739\n","Epoch 5/100\n","8/8 [==============================] - 0s 24ms/step - loss: 0.5709 - acc: 0.8268 - val_loss: 0.5412 - val_acc: 0.8174\n","Epoch 6/100\n","8/8 [==============================] - 0s 23ms/step - loss: 0.4690 - acc: 0.8618 - val_loss: 0.4539 - val_acc: 0.8435\n","Epoch 7/100\n","8/8 [==============================] - 0s 25ms/step - loss: 0.3549 - acc: 0.8969 - val_loss: 0.3863 - val_acc: 0.8435\n","Epoch 8/100\n","8/8 [==============================] - 0s 25ms/step - loss: 0.2496 - acc: 0.9079 - val_loss: 0.4108 - val_acc: 0.8174\n","Epoch 9/100\n","8/8 [==============================] - 0s 25ms/step - loss: 0.2169 - acc: 0.9123 - val_loss: 0.3187 - val_acc: 0.8348\n","Epoch 10/100\n","8/8 [==============================] - 0s 23ms/step - loss: 0.1798 - acc: 0.9386 - val_loss: 0.3031 - val_acc: 0.8696\n","Epoch 11/100\n","8/8 [==============================] - 0s 25ms/step - loss: 0.1526 - acc: 0.9561 - val_loss: 0.3319 - val_acc: 0.8609\n","Epoch 12/100\n","8/8 [==============================] - 0s 27ms/step - loss: 0.1180 - acc: 0.9605 - val_loss: 0.3121 - val_acc: 0.8783\n","Epoch 13/100\n","8/8 [==============================] - 0s 26ms/step - loss: 0.1064 - acc: 0.9649 - val_loss: 0.3400 - val_acc: 0.8609\n","Epoch 14/100\n","8/8 [==============================] - 0s 25ms/step - loss: 0.1036 - acc: 0.9561 - val_loss: 0.3436 - val_acc: 0.8435\n","Epoch 15/100\n","8/8 [==============================] - 0s 25ms/step - loss: 0.0899 - acc: 0.9737 - val_loss: 0.2601 - val_acc: 0.9217\n","Epoch 16/100\n","8/8 [==============================] - 0s 25ms/step - loss: 0.0737 - acc: 0.9759 - val_loss: 0.2999 - val_acc: 0.8783\n","Epoch 17/100\n","8/8 [==============================] - 0s 27ms/step - loss: 0.0479 - acc: 0.9890 - val_loss: 0.3125 - val_acc: 0.8783\n","Epoch 18/100\n","8/8 [==============================] - 0s 25ms/step - loss: 0.0605 - acc: 0.9759 - val_loss: 0.3691 - val_acc: 0.8783\n","Epoch 19/100\n","8/8 [==============================] - 0s 24ms/step - loss: 0.0421 - acc: 0.9825 - val_loss: 0.2915 - val_acc: 0.9043\n","Epoch 20/100\n","8/8 [==============================] - 0s 25ms/step - loss: 0.0308 - acc: 0.9956 - val_loss: 0.3286 - val_acc: 0.8696\n"]}]},{"cell_type":"code","metadata":{"id":"GFNUlAeVTsiT","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1632300392296,"user_tz":-420,"elapsed":578,"user":{"displayName":"SIWI CAHYANINGTYAS","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17820712209128539889"}},"outputId":"b3215cea-9fb5-4bfc-b1c9-56218e7f3ea6"},"source":["score,acc_lstm = m_lstm.evaluate(X_test, Y_test)"],"execution_count":28,"outputs":[{"output_type":"stream","name":"stdout","text":["9/9 [==============================] - 0s 4ms/step - loss: 0.3044 - acc: 0.8901\n"]}]},{"cell_type":"code","metadata":{"id":"DNaWHiB8Tuva","executionInfo":{"status":"ok","timestamp":1632300392857,"user_tz":-420,"elapsed":11,"user":{"displayName":"SIWI CAHYANINGTYAS","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17820712209128539889"}}},"source":["m_lstm.save('/content/drive/My Drive/Thesis/Code/FixModel/lstm_sentiment_pelayanan.h5')"],"execution_count":29,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"xTG40dBOAxrH"},"source":["### CNN"]},{"cell_type":"code","metadata":{"id":"qrk04_vWTwcj","executionInfo":{"status":"ok","timestamp":1632300392858,"user_tz":-420,"elapsed":10,"user":{"displayName":"SIWI CAHYANINGTYAS","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17820712209128539889"}}},"source":["from tensorflow.keras.models import Sequential\n","from tensorflow.keras import layers\n","from tensorflow.keras.layers import Concatenate, Input, Embedding, LSTM, Attention, Dense, Dropout, Bidirectional, Flatten, Conv1D, MaxPool1D, Reshape, GlobalAveragePooling1D, UpSampling1D, Layer\n","from tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint\n","from tensorflow.keras.models import Model\n","import matplotlib.pyplot as plt\n","import os"],"execution_count":30,"outputs":[]},{"cell_type":"code","metadata":{"id":"V_JQTnXqT2fA","executionInfo":{"status":"ok","timestamp":1632300392859,"user_tz":-420,"elapsed":10,"user":{"displayName":"SIWI CAHYANINGTYAS","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17820712209128539889"}}},"source":["def get_model_cnn(X,Y):\n","  vocab = max([len(tokenizer.word_index)])+1\n","  model_cnn = Sequential()\n","  model_cnn.add(Embedding(input_dim=vocab, output_dim=output, input_length=max_seq_len))\n","  model_cnn.add(Conv1D(filters=unit, kernel_size=3, padding='same', strides=1, activation='relu'))\n","  model_cnn.add(MaxPool1D(pool_size=2))\n","  # model_cnn.add(Dense(32, activation='relu'))\n","  model_cnn.add(SpatialDropout1D(dropout))\n","  model_cnn.add(Flatten())\n","  model_cnn.add(Dense(2, activation='sigmoid'))\n","  model_cnn.compile(optimizer='adam', loss='binary_crossentropy', metrics=['acc'])\n","  print(model_cnn.summary())\n","\n","  return model_cnn"],"execution_count":31,"outputs":[]},{"cell_type":"code","metadata":{"id":"kiHoXRfxT3-t","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1632300395894,"user_tz":-420,"elapsed":3044,"user":{"displayName":"SIWI CAHYANINGTYAS","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17820712209128539889"}},"outputId":"59312edf-92be-43a1-af6b-b0911c5dd0b8"},"source":["m_cnn = get_model_cnn(X_train, Y_train)\n","history_cnn = m_cnn.fit(X_train, Y_train,\n","                      epochs=epoch,batch_size=batch,\n","                      validation_split=0.2, callbacks =[earlystopping])"],"execution_count":32,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential_3\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","embedding_3 (Embedding)      (None, 14, 100)           95800     \n","_________________________________________________________________\n","conv1d (Conv1D)              (None, 14, 100)           30100     \n","_________________________________________________________________\n","max_pooling1d (MaxPooling1D) (None, 7, 100)            0         \n","_________________________________________________________________\n","spatial_dropout1d_3 (Spatial (None, 7, 100)            0         \n","_________________________________________________________________\n","flatten (Flatten)            (None, 700)               0         \n","_________________________________________________________________\n","dense_3 (Dense)              (None, 2)                 1402      \n","=================================================================\n","Total params: 127,302\n","Trainable params: 127,302\n","Non-trainable params: 0\n","_________________________________________________________________\n","None\n","Epoch 1/100\n","8/8 [==============================] - 1s 31ms/step - loss: 0.6927 - acc: 0.5241 - val_loss: 0.6878 - val_acc: 0.6609\n","Epoch 2/100\n","8/8 [==============================] - 0s 13ms/step - loss: 0.6787 - acc: 0.7281 - val_loss: 0.6777 - val_acc: 0.7043\n","Epoch 3/100\n","8/8 [==============================] - 0s 11ms/step - loss: 0.6686 - acc: 0.7127 - val_loss: 0.6651 - val_acc: 0.7565\n","Epoch 4/100\n","8/8 [==============================] - 0s 11ms/step - loss: 0.6496 - acc: 0.7763 - val_loss: 0.6451 - val_acc: 0.8087\n","Epoch 5/100\n","8/8 [==============================] - 0s 12ms/step - loss: 0.6148 - acc: 0.8706 - val_loss: 0.6110 - val_acc: 0.7565\n","Epoch 6/100\n","8/8 [==============================] - 0s 12ms/step - loss: 0.5671 - acc: 0.8991 - val_loss: 0.5615 - val_acc: 0.7913\n","Epoch 7/100\n","8/8 [==============================] - 0s 15ms/step - loss: 0.4927 - acc: 0.9386 - val_loss: 0.4966 - val_acc: 0.8174\n","Epoch 8/100\n","8/8 [==============================] - 0s 12ms/step - loss: 0.4009 - acc: 0.9364 - val_loss: 0.4234 - val_acc: 0.8609\n","Epoch 9/100\n","8/8 [==============================] - 0s 12ms/step - loss: 0.3082 - acc: 0.9342 - val_loss: 0.3572 - val_acc: 0.8783\n","Epoch 10/100\n","8/8 [==============================] - 0s 12ms/step - loss: 0.2349 - acc: 0.9430 - val_loss: 0.3185 - val_acc: 0.8783\n","Epoch 11/100\n","8/8 [==============================] - 0s 11ms/step - loss: 0.1811 - acc: 0.9561 - val_loss: 0.2750 - val_acc: 0.8957\n","Epoch 12/100\n","8/8 [==============================] - 0s 14ms/step - loss: 0.1391 - acc: 0.9605 - val_loss: 0.2508 - val_acc: 0.8957\n","Epoch 13/100\n","8/8 [==============================] - 0s 12ms/step - loss: 0.1054 - acc: 0.9715 - val_loss: 0.2341 - val_acc: 0.9043\n","Epoch 14/100\n","8/8 [==============================] - 0s 12ms/step - loss: 0.0894 - acc: 0.9803 - val_loss: 0.2238 - val_acc: 0.9217\n","Epoch 15/100\n","8/8 [==============================] - 0s 12ms/step - loss: 0.0688 - acc: 0.9912 - val_loss: 0.2169 - val_acc: 0.9217\n","Epoch 16/100\n","8/8 [==============================] - 0s 12ms/step - loss: 0.0580 - acc: 0.9934 - val_loss: 0.2153 - val_acc: 0.9130\n","Epoch 17/100\n","8/8 [==============================] - 0s 13ms/step - loss: 0.0466 - acc: 0.9934 - val_loss: 0.2112 - val_acc: 0.9043\n","Epoch 18/100\n","8/8 [==============================] - 0s 13ms/step - loss: 0.0373 - acc: 0.9978 - val_loss: 0.2125 - val_acc: 0.9043\n","Epoch 19/100\n","8/8 [==============================] - 0s 12ms/step - loss: 0.0372 - acc: 0.9934 - val_loss: 0.2144 - val_acc: 0.8957\n","Epoch 20/100\n","8/8 [==============================] - 0s 11ms/step - loss: 0.0284 - acc: 0.9956 - val_loss: 0.2145 - val_acc: 0.9043\n","Epoch 21/100\n","8/8 [==============================] - 0s 11ms/step - loss: 0.0254 - acc: 0.9978 - val_loss: 0.2181 - val_acc: 0.9043\n","Epoch 22/100\n","8/8 [==============================] - 0s 12ms/step - loss: 0.0230 - acc: 1.0000 - val_loss: 0.2180 - val_acc: 0.8870\n"]}]},{"cell_type":"code","metadata":{"id":"R8lCvNZcT5nt","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1632300395895,"user_tz":-420,"elapsed":15,"user":{"displayName":"SIWI CAHYANINGTYAS","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17820712209128539889"}},"outputId":"53e3390c-e62c-43a3-8a57-0b53d690c3e9"},"source":["score,acc_cnn = m_cnn.evaluate(X_test, Y_test)"],"execution_count":33,"outputs":[{"output_type":"stream","name":"stdout","text":["9/9 [==============================] - 0s 3ms/step - loss: 0.2649 - acc: 0.9043\n"]}]},{"cell_type":"code","metadata":{"id":"uISwQfIKT7c-","executionInfo":{"status":"ok","timestamp":1632300395896,"user_tz":-420,"elapsed":8,"user":{"displayName":"SIWI CAHYANINGTYAS","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17820712209128539889"}}},"source":["# m_cnn.save('/content/drive/My Drive/Thesis/Code/FinalModel/cnn_sentiment_pelayanan.h5')"],"execution_count":34,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"DHTDUWbYA2wP"},"source":["### BLSTM"]},{"cell_type":"code","metadata":{"id":"V4juzmHFT9aI","executionInfo":{"status":"ok","timestamp":1632300395897,"user_tz":-420,"elapsed":8,"user":{"displayName":"SIWI CAHYANINGTYAS","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17820712209128539889"}}},"source":["def get_model_BLSTM(X,Y):\n","  vocab = max([len(tokenizer.word_index)])+1\n","  model_BLSTM = Sequential()\n","  model_BLSTM.add(Embedding(input_dim=vocab, output_dim=output, input_length=max_seq_len))\n","  # model_BLSTM.add(Dense(32, activation='relu'))\n","  model_BLSTM.add((SpatialDropout1D(dropout)))\n","  model_BLSTM.add(Bidirectional(LSTM(unit)))\n","  model_BLSTM.add(Dense(2, activation='sigmoid'))\n","  model_BLSTM.compile(optimizer='adam', loss='binary_crossentropy', metrics=['acc'])\n","  print(model_BLSTM.summary())\n","  return model_BLSTM"],"execution_count":35,"outputs":[]},{"cell_type":"code","metadata":{"id":"jkcOCbDXUAzq","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1632300405532,"user_tz":-420,"elapsed":9643,"user":{"displayName":"SIWI CAHYANINGTYAS","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17820712209128539889"}},"outputId":"00fabb3e-9adb-4227-e22b-744496f1b5c8"},"source":["m_blstm = get_model_BLSTM(X_train, Y_train)\n","history_BLSTM = m_blstm.fit(X_train, Y_train,\n","                      epochs=epoch,batch_size=batch,\n","                      validation_split=0.2, callbacks =[earlystopping])"],"execution_count":36,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential_4\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","embedding_4 (Embedding)      (None, 14, 100)           95800     \n","_________________________________________________________________\n","spatial_dropout1d_4 (Spatial (None, 14, 100)           0         \n","_________________________________________________________________\n","bidirectional (Bidirectional (None, 200)               160800    \n","_________________________________________________________________\n","dense_4 (Dense)              (None, 2)                 402       \n","=================================================================\n","Total params: 257,002\n","Trainable params: 257,002\n","Non-trainable params: 0\n","_________________________________________________________________\n","None\n","Epoch 1/100\n","8/8 [==============================] - 5s 139ms/step - loss: 0.6914 - acc: 0.5570 - val_loss: 0.6875 - val_acc: 0.6957\n","Epoch 2/100\n","8/8 [==============================] - 0s 39ms/step - loss: 0.6837 - acc: 0.6404 - val_loss: 0.6780 - val_acc: 0.7217\n","Epoch 3/100\n","8/8 [==============================] - 0s 38ms/step - loss: 0.6671 - acc: 0.7149 - val_loss: 0.6532 - val_acc: 0.6348\n","Epoch 4/100\n","8/8 [==============================] - 0s 39ms/step - loss: 0.6317 - acc: 0.6908 - val_loss: 0.5940 - val_acc: 0.8348\n","Epoch 5/100\n","8/8 [==============================] - 0s 39ms/step - loss: 0.4972 - acc: 0.8640 - val_loss: 0.3927 - val_acc: 0.8000\n","Epoch 6/100\n","8/8 [==============================] - 0s 41ms/step - loss: 0.2441 - acc: 0.9232 - val_loss: 0.4019 - val_acc: 0.8261\n","Epoch 7/100\n","8/8 [==============================] - 0s 38ms/step - loss: 0.1843 - acc: 0.9364 - val_loss: 0.2915 - val_acc: 0.8609\n","Epoch 8/100\n","8/8 [==============================] - 0s 40ms/step - loss: 0.1288 - acc: 0.9627 - val_loss: 0.3055 - val_acc: 0.8522\n","Epoch 9/100\n","8/8 [==============================] - 0s 39ms/step - loss: 0.1123 - acc: 0.9693 - val_loss: 0.2734 - val_acc: 0.8957\n","Epoch 10/100\n","8/8 [==============================] - 0s 39ms/step - loss: 0.0884 - acc: 0.9693 - val_loss: 0.2797 - val_acc: 0.8957\n","Epoch 11/100\n","8/8 [==============================] - 0s 39ms/step - loss: 0.0691 - acc: 0.9781 - val_loss: 0.2824 - val_acc: 0.8783\n","Epoch 12/100\n","8/8 [==============================] - 0s 39ms/step - loss: 0.0521 - acc: 0.9868 - val_loss: 0.3147 - val_acc: 0.8783\n","Epoch 13/100\n","8/8 [==============================] - 0s 37ms/step - loss: 0.0475 - acc: 0.9781 - val_loss: 0.3244 - val_acc: 0.8783\n","Epoch 14/100\n","8/8 [==============================] - 0s 38ms/step - loss: 0.0361 - acc: 0.9912 - val_loss: 0.3142 - val_acc: 0.8870\n"]}]},{"cell_type":"code","metadata":{"id":"fwpOGPOoUCc5","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1632300405533,"user_tz":-420,"elapsed":14,"user":{"displayName":"SIWI CAHYANINGTYAS","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17820712209128539889"}},"outputId":"0816517b-f501-42b2-867f-468ab55f07b5"},"source":["score,acc_blstm = m_blstm.evaluate(X_test, Y_test)"],"execution_count":37,"outputs":[{"output_type":"stream","name":"stdout","text":["9/9 [==============================] - 0s 6ms/step - loss: 0.4290 - acc: 0.8369\n"]}]},{"cell_type":"code","metadata":{"id":"W3fxKXCwUEm6","executionInfo":{"status":"ok","timestamp":1632300405534,"user_tz":-420,"elapsed":12,"user":{"displayName":"SIWI CAHYANINGTYAS","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17820712209128539889"}}},"source":["# m_blstm.save('/content/drive/My Drive/Thesis/Code/Model/blstm_aspect_model.h5')"],"execution_count":38,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"4cvyCrSDA7al"},"source":["### ABLSTM"]},{"cell_type":"code","metadata":{"id":"rzMIDKo1UGGq","executionInfo":{"status":"ok","timestamp":1632300405535,"user_tz":-420,"elapsed":12,"user":{"displayName":"SIWI CAHYANINGTYAS","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17820712209128539889"}}},"source":["from keras.models import Sequential\n","from keras.layers import Embedding, LSTM, Dense, Dropout, Bidirectional, Flatten\n","import matplotlib.pyplot as plt\n","from keras_self_attention import SeqSelfAttention, SeqWeightedAttention\n","from keras.callbacks import EarlyStopping, ModelCheckpoint\n","\n","def get_model_ABLSTM(X,Y):\n","  vocab = max([len(tokenizer.word_index)])+1\n","  model_ABLSTM = Sequential()\n","  model_ABLSTM.add(Embedding(input_dim=vocab, output_dim=output, input_length=max_seq_len))\n","  # model_ABLSTM.add(Dense(32, activation='tanh'))\n","  model_ABLSTM.add(SpatialDropout1D(dropout))\n","  model_ABLSTM.add(Bidirectional(LSTM(unit, return_sequences=True)))\n","  model_ABLSTM.add(SeqWeightedAttention())\n","  model_ABLSTM.add(Dense(2, activation='sigmoid'))\n","  model_ABLSTM.compile(optimizer='adam', loss='binary_crossentropy', metrics=['acc'])\n","  print(model_ABLSTM.summary())\n","  \n","  return model_ABLSTM"],"execution_count":39,"outputs":[]},{"cell_type":"code","metadata":{"id":"kefMlp8EUIPr","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1632300413449,"user_tz":-420,"elapsed":7925,"user":{"displayName":"SIWI CAHYANINGTYAS","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17820712209128539889"}},"outputId":"8cc0d6d4-a8ba-469b-89fa-3ab253f81cb9"},"source":["m_ablstm = get_model_ABLSTM(X_train, Y_train)\n","history_ABLSTM = m_ablstm.fit(X_train, Y_train,\n","                      epochs=epoch,batch_size=batch,\n","                      validation_split=0.2, callbacks =[earlystopping])"],"execution_count":40,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential_5\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","embedding_5 (Embedding)      (None, 14, 100)           95800     \n","_________________________________________________________________\n","spatial_dropout1d_5 (Spatial (None, 14, 100)           0         \n","_________________________________________________________________\n","bidirectional_1 (Bidirection (None, 14, 200)           160800    \n","_________________________________________________________________\n","seq_weighted_attention (SeqW (None, 200)               201       \n","_________________________________________________________________\n","dense_5 (Dense)              (None, 2)                 402       \n","=================================================================\n","Total params: 257,203\n","Trainable params: 257,203\n","Non-trainable params: 0\n","_________________________________________________________________\n","None\n","Epoch 1/100\n","8/8 [==============================] - 4s 147ms/step - loss: 0.6926 - acc: 0.5197 - val_loss: 0.6893 - val_acc: 0.5304\n","Epoch 2/100\n","8/8 [==============================] - 0s 38ms/step - loss: 0.6881 - acc: 0.6075 - val_loss: 0.6830 - val_acc: 0.8522\n","Epoch 3/100\n","8/8 [==============================] - 0s 41ms/step - loss: 0.6715 - acc: 0.7412 - val_loss: 0.6433 - val_acc: 0.7304\n","Epoch 4/100\n","8/8 [==============================] - 0s 39ms/step - loss: 0.5673 - acc: 0.7961 - val_loss: 0.4640 - val_acc: 0.8348\n","Epoch 5/100\n","8/8 [==============================] - 0s 39ms/step - loss: 0.3407 - acc: 0.8991 - val_loss: 0.3678 - val_acc: 0.8174\n","Epoch 6/100\n","8/8 [==============================] - 0s 40ms/step - loss: 0.2175 - acc: 0.9298 - val_loss: 0.3698 - val_acc: 0.8609\n","Epoch 7/100\n","8/8 [==============================] - 0s 38ms/step - loss: 0.1729 - acc: 0.9452 - val_loss: 0.3737 - val_acc: 0.8783\n","Epoch 8/100\n","8/8 [==============================] - 0s 40ms/step - loss: 0.1475 - acc: 0.9583 - val_loss: 0.3975 - val_acc: 0.8696\n","Epoch 9/100\n","8/8 [==============================] - 0s 39ms/step - loss: 0.1321 - acc: 0.9649 - val_loss: 0.4037 - val_acc: 0.8783\n","Epoch 10/100\n","8/8 [==============================] - 0s 41ms/step - loss: 0.1063 - acc: 0.9715 - val_loss: 0.3913 - val_acc: 0.8783\n"]}]},{"cell_type":"code","metadata":{"id":"WbpASkA7UKHi","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1632300414589,"user_tz":-420,"elapsed":1146,"user":{"displayName":"SIWI CAHYANINGTYAS","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17820712209128539889"}},"outputId":"a290770f-4b9e-4627-cea6-e552496b5333"},"source":["score,acc_ablstm = m_ablstm.evaluate(X_test, Y_test)"],"execution_count":41,"outputs":[{"output_type":"stream","name":"stdout","text":["9/9 [==============================] - 0s 7ms/step - loss: 0.4253 - acc: 0.8121\n"]}]},{"cell_type":"code","metadata":{"id":"6za6cclSULso","executionInfo":{"status":"ok","timestamp":1632300414589,"user_tz":-420,"elapsed":6,"user":{"displayName":"SIWI CAHYANINGTYAS","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17820712209128539889"}}},"source":["# m_ablstm.save('/content/drive/My Drive/Thesis/Code/Model/ablstm_sentiment_model.h5')"],"execution_count":42,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"CNQOwZDkBB2R"},"source":["### CNNLSTM"]},{"cell_type":"code","metadata":{"id":"LdijuuFWUO9E","executionInfo":{"status":"ok","timestamp":1632300414590,"user_tz":-420,"elapsed":6,"user":{"displayName":"SIWI CAHYANINGTYAS","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17820712209128539889"}}},"source":["def get_model_clstm(X,Y):\n","  vocab = max([len(tokenizer.word_index)])+1\n","  model_clstm = Sequential()\n","  model_clstm.add(Embedding(input_dim=vocab, output_dim=output, input_length=max_seq_len))\n","  model_clstm.add(Conv1D(filters=unit, kernel_size=3, padding='same', activation='relu'))\n","  model_clstm.add(MaxPool1D(pool_size=2))\n","  # model_clstm.add(Dense(32, activation='relu'))\n","  model_clstm.add(SpatialDropout1D(dropout))\n","  model_clstm.add(LSTM(unit))\n","  model_clstm.add(Dense(2, activation='sigmoid'))\n","  model_clstm.compile(optimizer='nadam', loss='binary_crossentropy', metrics=['acc'])\n","  print(model_clstm.summary())\n","  return model_clstm"],"execution_count":43,"outputs":[]},{"cell_type":"code","metadata":{"id":"c1zoXGvgUQ3A","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1632300420581,"user_tz":-420,"elapsed":5996,"user":{"displayName":"SIWI CAHYANINGTYAS","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17820712209128539889"}},"outputId":"525e68c4-114f-4ffb-ce8d-db1a45347099"},"source":["m_clstm = get_model_clstm(X_train, Y_train)\n","history_CLSTM = m_clstm.fit(X_train, Y_train,\n","                      epochs=epoch,batch_size=batch,\n","                      validation_split=0.2, callbacks =[earlystopping])"],"execution_count":44,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential_6\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","embedding_6 (Embedding)      (None, 14, 100)           95800     \n","_________________________________________________________________\n","conv1d_1 (Conv1D)            (None, 14, 100)           30100     \n","_________________________________________________________________\n","max_pooling1d_1 (MaxPooling1 (None, 7, 100)            0         \n","_________________________________________________________________\n","spatial_dropout1d_6 (Spatial (None, 7, 100)            0         \n","_________________________________________________________________\n","lstm_3 (LSTM)                (None, 100)               80400     \n","_________________________________________________________________\n","dense_6 (Dense)              (None, 2)                 202       \n","=================================================================\n","Total params: 206,502\n","Trainable params: 206,502\n","Non-trainable params: 0\n","_________________________________________________________________\n","None\n","Epoch 1/100\n","8/8 [==============================] - 3s 85ms/step - loss: 0.6924 - acc: 0.5066 - val_loss: 0.6891 - val_acc: 0.8000\n","Epoch 2/100\n","8/8 [==============================] - 0s 22ms/step - loss: 0.6860 - acc: 0.6535 - val_loss: 0.6756 - val_acc: 0.8261\n","Epoch 3/100\n","8/8 [==============================] - 0s 23ms/step - loss: 0.6598 - acc: 0.7763 - val_loss: 0.6129 - val_acc: 0.8348\n","Epoch 4/100\n","8/8 [==============================] - 0s 23ms/step - loss: 0.5540 - acc: 0.8333 - val_loss: 0.4414 - val_acc: 0.8522\n","Epoch 5/100\n","8/8 [==============================] - 0s 22ms/step - loss: 0.3513 - acc: 0.8860 - val_loss: 0.3207 - val_acc: 0.8609\n","Epoch 6/100\n","8/8 [==============================] - 0s 24ms/step - loss: 0.2424 - acc: 0.9145 - val_loss: 0.2906 - val_acc: 0.8783\n","Epoch 7/100\n","8/8 [==============================] - 0s 22ms/step - loss: 0.1646 - acc: 0.9518 - val_loss: 0.2432 - val_acc: 0.8957\n","Epoch 8/100\n","8/8 [==============================] - 0s 23ms/step - loss: 0.1291 - acc: 0.9539 - val_loss: 0.2368 - val_acc: 0.8957\n","Epoch 9/100\n","8/8 [==============================] - 0s 23ms/step - loss: 0.0867 - acc: 0.9781 - val_loss: 0.2054 - val_acc: 0.9043\n","Epoch 10/100\n","8/8 [==============================] - 0s 23ms/step - loss: 0.0700 - acc: 0.9781 - val_loss: 0.2429 - val_acc: 0.9043\n","Epoch 11/100\n","8/8 [==============================] - 0s 23ms/step - loss: 0.0339 - acc: 0.9912 - val_loss: 0.2453 - val_acc: 0.9043\n","Epoch 12/100\n","8/8 [==============================] - 0s 22ms/step - loss: 0.0373 - acc: 0.9868 - val_loss: 0.2861 - val_acc: 0.9130\n","Epoch 13/100\n","8/8 [==============================] - 0s 22ms/step - loss: 0.0324 - acc: 0.9934 - val_loss: 0.2630 - val_acc: 0.9043\n","Epoch 14/100\n","8/8 [==============================] - 0s 26ms/step - loss: 0.0270 - acc: 0.9956 - val_loss: 0.2549 - val_acc: 0.9043\n"]}]},{"cell_type":"code","metadata":{"id":"UbtA4j_rUS5d","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1632300422716,"user_tz":-420,"elapsed":2142,"user":{"displayName":"SIWI CAHYANINGTYAS","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17820712209128539889"}},"outputId":"d71f1713-d56f-49db-df61-74f806df69d3"},"source":["score,acc_clstm = m_clstm.evaluate(X_test, Y_test)"],"execution_count":45,"outputs":[{"output_type":"stream","name":"stdout","text":["9/9 [==============================] - 0s 4ms/step - loss: 0.2705 - acc: 0.9113\n"]}]},{"cell_type":"code","metadata":{"id":"58r09paUUUlG","executionInfo":{"status":"ok","timestamp":1632300474879,"user_tz":-420,"elapsed":508,"user":{"displayName":"SIWI CAHYANINGTYAS","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17820712209128539889"}}},"source":["m_clstm.save('/content/drive/My Drive/Thesis/Code/FixModel2/clstm_sentiment_pelayanan_0.911.h5')"],"execution_count":68,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Iy8nWxe6BHYF"},"source":["### CNNBLSTM"]},{"cell_type":"code","metadata":{"id":"TVK0iWSAUXvp","executionInfo":{"status":"ok","timestamp":1632300422718,"user_tz":-420,"elapsed":9,"user":{"displayName":"SIWI CAHYANINGTYAS","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17820712209128539889"}}},"source":["def get_model_cblstm(X,Y):\n","  vocab = max([len(tokenizer.word_index)])+1\n","  model_cblstm = Sequential()\n","  model_cblstm.add(Embedding(input_dim=vocab, output_dim=output, input_length=max_seq_len))\n","  model_cblstm.add(Conv1D(filters=unit, kernel_size=3, padding='same', activation='relu'))\n","  model_cblstm.add(MaxPool1D(pool_size=2))\n","  # model_cblstm.add(Dense(32, activation='relu'))\n","  model_cblstm.add(SpatialDropout1D(dropout))\n","  model_cblstm.add(Bidirectional(LSTM(unit, return_sequences=False)))\n","  model_cblstm.add(Dense(2, activation='sigmoid'))\n","  model_cblstm.compile(optimizer='adam', loss='binary_crossentropy', metrics=['acc'])\n","  print(model_cblstm.summary())\n","\n","  return model_cblstm"],"execution_count":47,"outputs":[]},{"cell_type":"code","metadata":{"id":"-aEuCTxgUZvm","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1632300430607,"user_tz":-420,"elapsed":7897,"user":{"displayName":"SIWI CAHYANINGTYAS","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17820712209128539889"}},"outputId":"d37af152-25b3-40ac-a40a-1442a9661243"},"source":["m_cblstm = get_model_cblstm(X_train, Y_train)\n","history_CBLSTM = m_cblstm.fit(X_train, Y_train,\n","                      epochs=epoch,batch_size=batch,\n","                      validation_split=0.2, callbacks =[earlystopping])"],"execution_count":48,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential_7\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","embedding_7 (Embedding)      (None, 14, 100)           95800     \n","_________________________________________________________________\n","conv1d_2 (Conv1D)            (None, 14, 100)           30100     \n","_________________________________________________________________\n","max_pooling1d_2 (MaxPooling1 (None, 7, 100)            0         \n","_________________________________________________________________\n","spatial_dropout1d_7 (Spatial (None, 7, 100)            0         \n","_________________________________________________________________\n","bidirectional_2 (Bidirection (None, 200)               160800    \n","_________________________________________________________________\n","dense_7 (Dense)              (None, 2)                 402       \n","=================================================================\n","Total params: 287,102\n","Trainable params: 287,102\n","Non-trainable params: 0\n","_________________________________________________________________\n","None\n","Epoch 1/100\n","8/8 [==============================] - 4s 131ms/step - loss: 0.6922 - acc: 0.5000 - val_loss: 0.6870 - val_acc: 0.5304\n","Epoch 2/100\n","8/8 [==============================] - 0s 29ms/step - loss: 0.6842 - acc: 0.5461 - val_loss: 0.6729 - val_acc: 0.6435\n","Epoch 3/100\n","8/8 [==============================] - 0s 31ms/step - loss: 0.6539 - acc: 0.7193 - val_loss: 0.6193 - val_acc: 0.8261\n","Epoch 4/100\n","8/8 [==============================] - 0s 30ms/step - loss: 0.5379 - acc: 0.8465 - val_loss: 0.4364 - val_acc: 0.8261\n","Epoch 5/100\n","8/8 [==============================] - 0s 29ms/step - loss: 0.2951 - acc: 0.9167 - val_loss: 0.2972 - val_acc: 0.8522\n","Epoch 6/100\n","8/8 [==============================] - 0s 29ms/step - loss: 0.1629 - acc: 0.9452 - val_loss: 0.2978 - val_acc: 0.8522\n","Epoch 7/100\n","8/8 [==============================] - 0s 29ms/step - loss: 0.0989 - acc: 0.9671 - val_loss: 0.2220 - val_acc: 0.9043\n","Epoch 8/100\n","8/8 [==============================] - 0s 28ms/step - loss: 0.0557 - acc: 0.9803 - val_loss: 0.2304 - val_acc: 0.9043\n","Epoch 9/100\n","8/8 [==============================] - 0s 30ms/step - loss: 0.0504 - acc: 0.9868 - val_loss: 0.2068 - val_acc: 0.9304\n","Epoch 10/100\n","8/8 [==============================] - 0s 30ms/step - loss: 0.0333 - acc: 0.9912 - val_loss: 0.2022 - val_acc: 0.9391\n","Epoch 11/100\n","8/8 [==============================] - 0s 29ms/step - loss: 0.0287 - acc: 0.9912 - val_loss: 0.2336 - val_acc: 0.9217\n","Epoch 12/100\n","8/8 [==============================] - 0s 30ms/step - loss: 0.0198 - acc: 0.9934 - val_loss: 0.2409 - val_acc: 0.9217\n","Epoch 13/100\n","8/8 [==============================] - 0s 28ms/step - loss: 0.0196 - acc: 0.9956 - val_loss: 0.2477 - val_acc: 0.9217\n","Epoch 14/100\n","8/8 [==============================] - 0s 31ms/step - loss: 0.0127 - acc: 0.9978 - val_loss: 0.2583 - val_acc: 0.9130\n","Epoch 15/100\n","8/8 [==============================] - 0s 29ms/step - loss: 0.0184 - acc: 0.9956 - val_loss: 0.2553 - val_acc: 0.9130\n"]}]},{"cell_type":"code","metadata":{"id":"6rA1QjdDUbK3","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1632300431238,"user_tz":-420,"elapsed":639,"user":{"displayName":"SIWI CAHYANINGTYAS","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17820712209128539889"}},"outputId":"28322c7c-e98c-41ec-b68d-76f6ab60d9e2"},"source":["score,acc_cblstm = m_cblstm.evaluate(X_test, Y_test)"],"execution_count":49,"outputs":[{"output_type":"stream","name":"stdout","text":["9/9 [==============================] - 0s 5ms/step - loss: 0.4528 - acc: 0.8759\n"]}]},{"cell_type":"code","metadata":{"id":"DA-ZEgvEUc1C","executionInfo":{"status":"ok","timestamp":1632300431239,"user_tz":-420,"elapsed":67,"user":{"displayName":"SIWI CAHYANINGTYAS","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17820712209128539889"}}},"source":["# m_cblstm.save('/content/drive/My Drive/Thesis/Code/FixModel2/cblstm_sentiment_pelayanan_9174.h5')"],"execution_count":50,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"SMHcw5E87qeG"},"source":["### Result"]},{"cell_type":"code","metadata":{"id":"OeUu2x5pUgAf","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1632300431242,"user_tz":-420,"elapsed":64,"user":{"displayName":"SIWI CAHYANINGTYAS","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17820712209128539889"}},"outputId":"81b0530a-1b3e-49d2-dfd1-1428ba5eabdf"},"source":["acc = {'Model': ['RNN','LSTM', 'GRU', 'BiLSTM', 'ABLSTM', 'CNN', 'CNNLSTM','CNNBLSTM'],\n","       'Acc': [acc_rnn, acc_lstm, acc_gru, acc_blstm, acc_ablstm, acc_cnn, acc_clstm, acc_cblstm]}   \n","df_acc_nn = pd.DataFrame(acc)  \n","print(df_acc_nn)  "],"execution_count":51,"outputs":[{"output_type":"stream","name":"stdout","text":["      Model       Acc\n","0       RNN  0.861702\n","1      LSTM  0.890071\n","2       GRU  0.886525\n","3    BiLSTM  0.836879\n","4    ABLSTM  0.812057\n","5       CNN  0.904255\n","6   CNNLSTM  0.911348\n","7  CNNBLSTM  0.875886\n"]}]},{"cell_type":"markdown","metadata":{"id":"uroMA0JNBNT1"},"source":["## Machhine Learning"]},{"cell_type":"code","metadata":{"id":"nSjX_E4aUiP7","executionInfo":{"status":"ok","timestamp":1632300431244,"user_tz":-420,"elapsed":59,"user":{"displayName":"SIWI CAHYANINGTYAS","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17820712209128539889"}}},"source":["from sklearn.naive_bayes import MultinomialNB\n","from sklearn.svm import SVC, LinearSVC\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.feature_extraction.text import CountVectorizer\n","from sklearn.feature_extraction.text import TfidfTransformer\n","from sklearn.pipeline import Pipeline\n","from sklearn.model_selection import train_test_split, cross_val_score\n","from sklearn.metrics import classification_report, confusion_matrix, accuracy_score, f1_score, precision_score, recall_score, plot_confusion_matrix\n","import numpy as np\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","\n","np.random.seed(7)"],"execution_count":52,"outputs":[]},{"cell_type":"code","metadata":{"id":"K5WU1_9EUko6","executionInfo":{"status":"ok","timestamp":1632300431245,"user_tz":-420,"elapsed":56,"user":{"displayName":"SIWI CAHYANINGTYAS","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17820712209128539889"}}},"source":["X_train2, X_test2, y_train2, y_test2 = train_test_split(text, label, random_state=1)"],"execution_count":53,"outputs":[]},{"cell_type":"code","metadata":{"id":"aR080ykuUmsP","executionInfo":{"status":"ok","timestamp":1632300431247,"user_tz":-420,"elapsed":45,"user":{"displayName":"SIWI CAHYANINGTYAS","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17820712209128539889"}}},"source":["acc_result = []\n","cross_val = 5"],"execution_count":54,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"9Q6w3GRuBSBr"},"source":["### MNB"]},{"cell_type":"code","metadata":{"id":"CufsDryMUoDJ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1632300431620,"user_tz":-420,"elapsed":411,"user":{"displayName":"SIWI CAHYANINGTYAS","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17820712209128539889"}},"outputId":"91a3e9e2-0ae3-4491-98c2-6eb3abf7e42e"},"source":["#Multinomial Naive Bayes with bigram\n","pipeline_mnb_bigram = Pipeline([\n","    ('vect', CountVectorizer(min_df=3, ngram_range=(1,2))),\n","    ('tfidf', TfidfTransformer(use_idf=True, smooth_idf=True)),\n","    ('clf', MultinomialNB(alpha=1))\n","])\n","\n","scores_mnb_bigram = cross_val_score(pipeline_mnb_bigram,X_train2,y_train2,cv=cross_val, scoring='accuracy')\n","mean_score = round(np.mean(scores_mnb_bigram), 4)\n","std_score = round(np.std(scores_mnb_bigram), 4)\n","print(\"Accuracy: {0:.4f}\".format(mean_score))\n","print(\"Standard Dev: +/-{0:.4f}\".format(std_score))\n","d1 = ('MNB+Bigram',mean_score, std_score)\n","acc_result.append(d1)"],"execution_count":55,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy: 0.8076\n","Standard Dev: +/-0.0204\n"]}]},{"cell_type":"code","metadata":{"id":"rmfc04JnUpux","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1632300431625,"user_tz":-420,"elapsed":39,"user":{"displayName":"SIWI CAHYANINGTYAS","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17820712209128539889"}},"outputId":"5f3f77af-1621-4d5a-8747-6e310638bf70"},"source":["#Multinomial Naive Bayes unigram\n","pipeline_mnb_unigram = Pipeline([\n","    ('vect', CountVectorizer(min_df=3, ngram_range=(1,1))),\n","    ('tfidf', TfidfTransformer(use_idf=True, smooth_idf=True)),\n","    ('clf', MultinomialNB(alpha=1))\n","])\n","\n","scores_mnb_unigram = cross_val_score(pipeline_mnb_unigram,X_train2,y_train2,cv=cross_val, scoring='accuracy')\n","mean_score = round(np.mean(scores_mnb_unigram), 4)\n","std_score = round(np.std(scores_mnb_unigram), 4)\n","print(\"Accuracy: {0:.4f}\".format(mean_score))\n","print(\"Standard Dev: +/-{0:.4f}\".format(std_score))\n","d2 = ('MNB+Unigram',mean_score, std_score)\n","acc_result.append(d2)"],"execution_count":56,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy: 0.8013\n","Standard Dev: +/-0.0221\n"]}]},{"cell_type":"markdown","metadata":{"id":"USJ83MjBBVZl"},"source":["### SVC"]},{"cell_type":"code","metadata":{"id":"PGVczeF4Ur1S","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1632300431626,"user_tz":-420,"elapsed":34,"user":{"displayName":"SIWI CAHYANINGTYAS","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17820712209128539889"}},"outputId":"1a423bba-86ee-4a0c-bc08-23e84bc2bc8d"},"source":["#SVC with bigram\n","pipeline_svc_bigram = Pipeline([\n","    ('vect', CountVectorizer(min_df=3, ngram_range=(1,2))),\n","    ('tfidf', TfidfTransformer(use_idf=True, smooth_idf=True)),\n","    ('clf', SVC(kernel='linear',C=0.1, decision_function_shape='ovr'))\n","])\n","\n","scores_svc_bigram = cross_val_score(pipeline_svc_bigram,X_train2,y_train2,cv=cross_val, scoring='accuracy')\n","mean_score = round(np.mean(scores_svc_bigram), 4)\n","std_score = round(np.std(scores_svc_bigram), 4)\n","print(\"Accuracy: {0:.4f}\".format(mean_score))\n","print(\"Standard Dev: +/-{0:.4f}\".format(std_score))\n","d3 = ('SVC+Bigram',mean_score, std_score)\n","acc_result.append(d3)"],"execution_count":57,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy: 0.7872\n","Standard Dev: +/-0.0406\n"]}]},{"cell_type":"code","metadata":{"id":"2WIjJb5eUtkI","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1632300431627,"user_tz":-420,"elapsed":23,"user":{"displayName":"SIWI CAHYANINGTYAS","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17820712209128539889"}},"outputId":"334ecdd4-99bf-4f8d-a4d4-ec9d7f36da0f"},"source":["#SVC Unigram\n","pipeline_svc_unigram = Pipeline([\n","    ('vect', CountVectorizer(min_df=3, ngram_range=(1,1))),\n","    ('tfidf', TfidfTransformer(use_idf=True, smooth_idf=True)),\n","    ('clf', SVC(kernel='linear',C=0.1, decision_function_shape='ovr'))\n","])\n","\n","scores_svc_unigram = cross_val_score(pipeline_svc_unigram,X_train2,y_train2,cv=cross_val, scoring='accuracy')\n","mean_score = round(np.mean(scores_svc_unigram), 4)\n","std_score = round(np.std(scores_svc_unigram), 4)\n","print(\"Accuracy: {0:.4f}\".format(mean_score))\n","print(\"Standard Dev: +/-{0:.4f}\".format(std_score))\n","d4 = ('SVC+Unigram',mean_score, std_score)\n","acc_result.append(d4)"],"execution_count":58,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy: 0.7841\n","Standard Dev: +/-0.0395\n"]}]},{"cell_type":"markdown","metadata":{"id":"OkGOlxOABYXi"},"source":["### Logistic Regression"]},{"cell_type":"code","metadata":{"id":"p5RGympEUvRD","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1632300432655,"user_tz":-420,"elapsed":1048,"user":{"displayName":"SIWI CAHYANINGTYAS","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17820712209128539889"}},"outputId":"ded447db-d6c3-47ae-bbf0-4c0a0510da28"},"source":["#Logistic Regression with Bigram\n","pipeline_lr_bigram = Pipeline([\n","    ('vect', CountVectorizer(min_df=3, ngram_range=(1,2))),\n","    ('tfidf', TfidfTransformer(use_idf=True, smooth_idf=True)),\n","    ('clf', LogisticRegression())\n","])\n","\n","scores_lr_bigram = cross_val_score(pipeline_lr_bigram,X_train2,y_train2,cv=cross_val, scoring='accuracy')\n","mean_score = round(np.mean(scores_lr_bigram), 4)\n","std_score = round(np.std(scores_lr_bigram), 4)\n","print(\"Accuracy: {0:.4f}\".format(mean_score))\n","print(\"Standard Dev: +/-{0:.4f}\".format(std_score))\n","d5 = ('LR+Bigram',mean_score, std_score)\n","acc_result.append(d5)"],"execution_count":59,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy: 0.8263\n","Standard Dev: +/-0.0271\n"]}]},{"cell_type":"code","metadata":{"id":"e5yLB1cnUxNC","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1632300432658,"user_tz":-420,"elapsed":49,"user":{"displayName":"SIWI CAHYANINGTYAS","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17820712209128539889"}},"outputId":"f09b1ab9-1595-4427-8a9a-8c53efb37420"},"source":["#Logistic Regression Unigram\n","pipeline_lr_unigram = Pipeline([\n","    ('vect', CountVectorizer(min_df=3, ngram_range=(1,1))),\n","    ('tfidf', TfidfTransformer(use_idf=True, smooth_idf=True)),\n","    ('clf', LogisticRegression())\n","])\n","\n","scores_lr_unigram = cross_val_score(pipeline_lr_unigram,X_train2,y_train2,cv=cross_val, scoring='accuracy')\n","mean_score = round(np.mean(scores_lr_unigram), 4)\n","std_score = round(np.std(scores_lr_unigram), 4)\n","print(\"Accuracy: {0:.4f}\".format(mean_score))\n","print(\"Standard Dev: +/-{0:.4f}\".format(std_score))\n","d6 = ('LR+Unigram',mean_score, std_score)\n","acc_result.append(d6)"],"execution_count":60,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy: 0.8279\n","Standard Dev: +/-0.0269\n"]}]},{"cell_type":"code","metadata":{"id":"7k2aEchDUzKJ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1632300432662,"user_tz":-420,"elapsed":44,"user":{"displayName":"SIWI CAHYANINGTYAS","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17820712209128539889"}},"outputId":"017c2ac4-f52d-44e7-8ea6-6bdb1a56b802"},"source":["# create DataFrame using data \n","df_acc_ml = pd.DataFrame.from_records(acc_result, columns =['Model', 'Accuracy', 'Standard Deviation']) \n","  \n","print(df_acc_ml)  "],"execution_count":61,"outputs":[{"output_type":"stream","name":"stdout","text":["         Model  Accuracy  Standard Deviation\n","0   MNB+Bigram    0.8076              0.0204\n","1  MNB+Unigram    0.8013              0.0221\n","2   SVC+Bigram    0.7872              0.0406\n","3  SVC+Unigram    0.7841              0.0395\n","4    LR+Bigram    0.8263              0.0271\n","5   LR+Unigram    0.8279              0.0269\n"]}]},{"cell_type":"markdown","metadata":{"id":"EJ64PtWnBddd"},"source":["# Overall Result"]},{"cell_type":"code","metadata":{"id":"Cc97CgmZU0xL","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1632300432667,"user_tz":-420,"elapsed":47,"user":{"displayName":"SIWI CAHYANINGTYAS","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17820712209128539889"}},"outputId":"8dfe0f69-39d7-466f-b234-0b348572a8dd"},"source":["print(df_acc_nn)"],"execution_count":62,"outputs":[{"output_type":"stream","name":"stdout","text":["      Model       Acc\n","0       RNN  0.861702\n","1      LSTM  0.890071\n","2       GRU  0.886525\n","3    BiLSTM  0.836879\n","4    ABLSTM  0.812057\n","5       CNN  0.904255\n","6   CNNLSTM  0.911348\n","7  CNNBLSTM  0.875886\n"]}]},{"cell_type":"code","metadata":{"id":"fXXzuarUU2_a","colab":{"base_uri":"https://localhost:8080/","height":97},"executionInfo":{"status":"ok","timestamp":1632300432667,"user_tz":-420,"elapsed":44,"user":{"displayName":"SIWI CAHYANINGTYAS","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17820712209128539889"}},"outputId":"9d95bcc8-a26e-46ae-bf96-fc53a853fbe8"},"source":["print(\"Best Neural Network Model :\")\n","df_acc_nn[['Model', 'Acc']][df_acc_nn.Acc == df_acc_nn.Acc.max()]"],"execution_count":63,"outputs":[{"output_type":"stream","name":"stdout","text":["Best Neural Network Model :\n"]},{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Model</th>\n","      <th>Acc</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>6</th>\n","      <td>CNNLSTM</td>\n","      <td>0.911348</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["     Model       Acc\n","6  CNNLSTM  0.911348"]},"metadata":{},"execution_count":63}]},{"cell_type":"code","metadata":{"id":"kM_aJD23U4hC","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1632300432668,"user_tz":-420,"elapsed":42,"user":{"displayName":"SIWI CAHYANINGTYAS","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17820712209128539889"}},"outputId":"0c3661e9-6a73-46d9-c85b-de612f20ba14"},"source":["print(df_acc_ml)"],"execution_count":64,"outputs":[{"output_type":"stream","name":"stdout","text":["         Model  Accuracy  Standard Deviation\n","0   MNB+Bigram    0.8076              0.0204\n","1  MNB+Unigram    0.8013              0.0221\n","2   SVC+Bigram    0.7872              0.0406\n","3  SVC+Unigram    0.7841              0.0395\n","4    LR+Bigram    0.8263              0.0271\n","5   LR+Unigram    0.8279              0.0269\n"]}]},{"cell_type":"code","metadata":{"id":"2d-0vXj2U8RA","colab":{"base_uri":"https://localhost:8080/","height":97},"executionInfo":{"status":"ok","timestamp":1632300432669,"user_tz":-420,"elapsed":41,"user":{"displayName":"SIWI CAHYANINGTYAS","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17820712209128539889"}},"outputId":"e1065763-55b3-48e3-9776-29c7fea8c4ab"},"source":["print(\"Best Machine Learning Model :\")\n","df_acc_ml[['Model', 'Accuracy']][df_acc_ml.Accuracy == df_acc_ml.Accuracy.max()]"],"execution_count":65,"outputs":[{"output_type":"stream","name":"stdout","text":["Best Machine Learning Model :\n"]},{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Model</th>\n","      <th>Accuracy</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>5</th>\n","      <td>LR+Unigram</td>\n","      <td>0.8279</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["        Model  Accuracy\n","5  LR+Unigram    0.8279"]},"metadata":{},"execution_count":65}]},{"cell_type":"code","metadata":{"id":"A87lb7zf3luk","executionInfo":{"status":"ok","timestamp":1632300432670,"user_tz":-420,"elapsed":38,"user":{"displayName":"SIWI CAHYANINGTYAS","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17820712209128539889"}}},"source":["model = m_clstm"],"execution_count":66,"outputs":[]},{"cell_type":"code","metadata":{"id":"At9xy80o3uUs","colab":{"base_uri":"https://localhost:8080/","height":754},"executionInfo":{"status":"ok","timestamp":1632300432671,"user_tz":-420,"elapsed":38,"user":{"displayName":"SIWI CAHYANINGTYAS","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17820712209128539889"}},"outputId":"b04c53a5-0a8f-4102-c0c8-f5b0ff890d10"},"source":["from keras.utils.vis_utils import plot_model\n","\n","plot_model(model, to_file='model_plot.png', show_shapes=True, show_layer_names=True)"],"execution_count":67,"outputs":[{"output_type":"execute_result","data":{"image/png":"\n","text/plain":["<IPython.core.display.Image object>"]},"metadata":{},"execution_count":67}]},{"cell_type":"markdown","metadata":{"id":"CeE3j9-cZ9sk"},"source":["# Analyze Results"]},{"cell_type":"code","metadata":{"id":"DisK8JSvaqcY"},"source":["ev_model = model.predict(X_test)\n","ev_model_list = ev_model.tolist()\n","ev_classes = np.argmax(ev_model,axis=1)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TaThR6jwatVt","executionInfo":{"status":"ok","timestamp":1632234008272,"user_tz":-420,"elapsed":22,"user":{"displayName":"SIWI CAHYANINGTYAS","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17820712209128539889"}},"outputId":"a424d8a8-1b1f-4950-95af-2d67c0794ca7"},"source":["# Creating a reverse dictionary\n","reverse_word_map = dict(map(reversed, tokenizer.word_index.items()))\n","\n","# Function takes a tokenized sentence and returns the words\n","def sequence_to_text(list_of_indices):\n","    # Looking up words in dictionary\n","    words = [reverse_word_map.get(letter) for letter in list_of_indices]\n","    return(words)\n","\n","# Creating texts \n","my_texts = list(map(sequence_to_text, X_test))\n","text_str=[]\n","for x in my_texts:\n","  x_str = ' '.join([str(elem) for elem in x])\n","  text_str.append(x_str)\n","text_str[0]\n"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["'None None None None None None None None None None tidak punya standar pelayanan'"]},"metadata":{},"execution_count":71}]},{"cell_type":"markdown","metadata":{"id":"LiXfkNu0ax3D"},"source":["## Confusion Matrix"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zQ2OCP-pat4_","executionInfo":{"status":"ok","timestamp":1632234008971,"user_tz":-420,"elapsed":718,"user":{"displayName":"SIWI CAHYANINGTYAS","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17820712209128539889"}},"outputId":"ef9161b2-aaef-41ed-96fc-7eee3f9c8b76"},"source":["decode_sentiment = np.argmax(Y_test, axis=1)\n","lab_sentiment = [\"positive\",\"negative\"]\n","def conf_matrix(Y_act, Y_pred, lab):\n","    confusion_mtx = confusion_matrix(Y_act, Y_pred)\n","    plt.figure(figsize=(10,8))\n","    sns.heatmap(confusion_mtx, annot=True, fmt=\"d\", xticklabels=lab, yticklabels=lab)\n","    plt.ylabel(\"Actual\")\n","    plt.xlabel(\"Predicted\")\n","    plt.show()\n","\n","def plot_cm(Y_act, y_pred, lab, figsize=(10,10)):\n","    cm = confusion_matrix(Y_act, y_pred, labels=np.unique(Y_act))\n","    cm_sum = np.sum(cm, axis=1, keepdims=True)\n","    cm_perc = cm / cm_sum.astype(float) * 100\n","    annot = np.empty_like(cm).astype(str)\n","    nrows, ncols = cm.shape\n","    for i in range(nrows):\n","        for j in range(ncols):\n","            c = cm[i, j]\n","            p = cm_perc[i, j]\n","            if i == j:\n","                s = cm_sum[i]\n","                annot[i, j] = '%.1f%%\\n%d/%d' % (p, c, s)\n","                # annot[i,j] = '%.1f%%' % (p)\n","            # elif c == 0:\n","            #     annot[i, j] = ''\n","            else:\n","                annot[i, j] = '%.1f%%\\n%d' % (p, c)\n","                # annot[i, j] = '%.1f%%' % (p)\n","    cm = pd.DataFrame(cm_perc, index=np.unique(Y_act), columns=np.unique(Y_act))\n","    cm.index.name = 'Actual'\n","    cm.columns.name = 'Predicted'\n","    fig, ax = plt.subplots(figsize=figsize)\n","    sns.heatmap(cm, cmap= \"YlGnBu\", annot=annot, fmt='', ax=ax, xticklabels=lab, yticklabels=lab)\n","    # sns.heatmap(uniform_data,\n","    #         cbar_kws={'format': '%.0f%%', 'ticks': [0, 100]},\n","    #         vmax=100,\n","    #         vmin=0)\n","plot_cm(ev_classes, decode_sentiment,lab_sentiment)"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 720x720 with 2 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"FS7nOc7ga5D3","executionInfo":{"status":"ok","timestamp":1632234008973,"user_tz":-420,"elapsed":44,"user":{"displayName":"SIWI CAHYANINGTYAS","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17820712209128539889"}},"outputId":"743f0ba5-c0c0-440f-811a-77526c1db058"},"source":["from sklearn.metrics import accuracy_score\n","from sklearn.metrics import classification_report\n","accuracy_score(ev_classes, decode_sentiment)\n","print(classification_report(ev_classes, decode_sentiment))"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["              precision    recall  f1-score   support\n","\n","           0       0.93      0.92      0.92       142\n","           1       0.92      0.93      0.92       140\n","\n","    accuracy                           0.92       282\n","   macro avg       0.92      0.92      0.92       282\n","weighted avg       0.92      0.92      0.92       282\n","\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"28OQViE3a5kX","executionInfo":{"status":"ok","timestamp":1632234008978,"user_tz":-420,"elapsed":44,"user":{"displayName":"SIWI CAHYANINGTYAS","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17820712209128539889"}},"outputId":"6f3ed65c-eb29-4434-9f65-15e9c749ec72"},"source":["ev_train_model = model.predict(X_train)\n","ev_train_classes = np.argmax(ev_train_model,axis=1)\n","decode_train = np.argmax(Y_train, axis=1)\n","print(classification_report(ev_train_classes, decode_train))"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["              precision    recall  f1-score   support\n","\n","           0       0.99      0.96      0.98       288\n","           1       0.96      0.99      0.98       282\n","\n","    accuracy                           0.98       570\n","   macro avg       0.98      0.98      0.98       570\n","weighted avg       0.98      0.98      0.98       570\n","\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"rh1Q_stLa9O5","executionInfo":{"status":"ok","timestamp":1632234009022,"user_tz":-420,"elapsed":81,"user":{"displayName":"SIWI CAHYANINGTYAS","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17820712209128539889"}},"outputId":"07950272-8393-47d8-9fc5-e41b94be3df0"},"source":["from sklearn.metrics import precision_score, \\\n","    recall_score, confusion_matrix, classification_report, \\\n","    accuracy_score, f1_score\n","\n","print('Accuracy:', accuracy_score(ev_classes, decode_sentiment))\n","print('F1 score:', f1_score(ev_classes, decode_sentiment, average='macro'))\n","print('Recall:', recall_score(ev_classes, decode_sentiment, average='macro'))\n","print('Precision:', precision_score(ev_classes, decode_sentiment, average='macro'))"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy: 0.9219858156028369\n","F1 score: 0.921985815602837\n","Recall: 0.9220321931589537\n","Precision: 0.9220321931589537\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"f3D12e7fbAdt","executionInfo":{"status":"ok","timestamp":1632234010163,"user_tz":-420,"elapsed":1213,"user":{"displayName":"SIWI CAHYANINGTYAS","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17820712209128539889"}},"outputId":"f71a798d-afdc-436b-9ca8-e4f4c5264837"},"source":["plt.title('Loss')\n","plt.plot(history_LSTM.history['loss'], label='train')\n","plt.plot(history_LSTM.history['val_loss'], label='test')\n","plt.legend()\n","plt.show();\n","\n","plt.title('Accuracy')\n","plt.plot(history_LSTM.history['acc'], label='train')\n","plt.plot(history_LSTM.history['val_acc'], label='test')\n","plt.legend()\n","plt.show();"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wSNA01CUbDVv","executionInfo":{"status":"ok","timestamp":1632234010164,"user_tz":-420,"elapsed":371,"user":{"displayName":"SIWI CAHYANINGTYAS","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17820712209128539889"}},"outputId":"1e02349c-232b-4b96-9eb7-ba13a2e39f40"},"source":["print(history_BLSTM.history['acc'])\n","print(history_BLSTM.history['val_acc'])"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[0.5175438523292542, 0.5219298005104065, 0.5285087823867798, 0.719298243522644, 0.8815789222717285, 0.9188596606254578, 0.9407894611358643, 0.9671052694320679, 0.9758771657943726, 0.9868420958518982, 0.9890350699424744, 0.9890350699424744, 0.9912280440330505, 0.9934210777282715, 0.9956140518188477]\n","[0.4649122953414917, 0.4649122953414917, 0.5526315569877625, 0.780701756477356, 0.8508771657943726, 0.8508771657943726, 0.8771929740905762, 0.9035087823867798, 0.8947368264198303, 0.9122806787490845, 0.9122806787490845, 0.9122806787490845, 0.9122806787490845, 0.9210526347160339, 0.8859649300575256]\n"]}]},{"cell_type":"markdown","metadata":{"id":"S4RdrzrKbGSj"},"source":["## Evalute Misclassification"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Bi6BWXcMbJ9q","executionInfo":{"status":"ok","timestamp":1632234010201,"user_tz":-420,"elapsed":393,"user":{"displayName":"SIWI CAHYANINGTYAS","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17820712209128539889"}},"outputId":"d64f4734-191f-45ac-8a6e-0a96ceb4121f"},"source":["ev_data_test = {'Text':text_str,\n","        'Act':decode_sentiment,\n","        'Pred':ev_classes}\n","df_final_ev = pd.DataFrame(ev_data_test)\n","df_final_ev"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Text</th>\n","      <th>Act</th>\n","      <th>Pred</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>None None None None None None None None None N...</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>None None None None None None None None None N...</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>None None None None None None None ada staff b...</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>None None None None None None None None None N...</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>None None None None None None None None None N...</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>277</th>\n","      <td>None None None None None None None None None N...</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>278</th>\n","      <td>None None None None None None None mendengar k...</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>279</th>\n","      <td>None None None None None None None staff tidak...</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>280</th>\n","      <td>None None None None None None None None None N...</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>281</th>\n","      <td>None None None None None None None None None s...</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>282 rows Ã— 3 columns</p>\n","</div>"],"text/plain":["                                                  Text  Act  Pred\n","0    None None None None None None None None None N...    0     0\n","1    None None None None None None None None None N...    1     1\n","2    None None None None None None None ada staff b...    1     1\n","3    None None None None None None None None None N...    1     1\n","4    None None None None None None None None None N...    0     0\n","..                                                 ...  ...   ...\n","277  None None None None None None None None None N...    0     0\n","278  None None None None None None None mendengar k...    0     0\n","279  None None None None None None None staff tidak...    0     0\n","280  None None None None None None None None None N...    1     1\n","281  None None None None None None None None None s...    0     0\n","\n","[282 rows x 3 columns]"]},"metadata":{},"execution_count":78}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_ElFiCQ7bPN_","executionInfo":{"status":"ok","timestamp":1632234010214,"user_tz":-420,"elapsed":394,"user":{"displayName":"SIWI CAHYANINGTYAS","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17820712209128539889"}},"outputId":"15e18866-bcf0-45da-8c34-29cb79251608"},"source":["remove_words = ['None']\n","pat = r'\\b(?:{})\\b'.format('|'.join(remove_words))\n","df_final_ev['Text'] = df_final_ev['Text'].str.replace(pat, '')\n","df_final_ev"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Text</th>\n","      <th>Act</th>\n","      <th>Pred</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>tidak punya standar pelayanan</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>pelayanan prokes baik</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>ada staff bantu mengarahkan tempat park...</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>staff ramah diantar keliling</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>lantai kamar tidak disapu</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>277</th>\n","      <td>checkin lama satu jam</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>278</th>\n","      <td>mendengar kepala dapur mengatakan tidak...</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>279</th>\n","      <td>staff tidak bisa menjawab pertanyaan me...</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>280</th>\n","      <td>pelayanan kebersihan oke</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>281</th>\n","      <td>staff tidak bantu angkat barang</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>282 rows Ã— 3 columns</p>\n","</div>"],"text/plain":["                                                  Text  Act  Pred\n","0                        tidak punya standar pelayanan    0     0\n","1                                pelayanan prokes baik    1     1\n","2           ada staff bantu mengarahkan tempat park...    1     1\n","3                         staff ramah diantar keliling    1     1\n","4                            lantai kamar tidak disapu    0     0\n","..                                                 ...  ...   ...\n","277                              checkin lama satu jam    0     0\n","278         mendengar kepala dapur mengatakan tidak...    0     0\n","279         staff tidak bisa menjawab pertanyaan me...    0     0\n","280                           pelayanan kebersihan oke    1     1\n","281                    staff tidak bantu angkat barang    0     0\n","\n","[282 rows x 3 columns]"]},"metadata":{},"execution_count":79}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"quoDQjxQbStv","executionInfo":{"status":"ok","timestamp":1632234010215,"user_tz":-420,"elapsed":390,"user":{"displayName":"SIWI CAHYANINGTYAS","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17820712209128539889"}},"outputId":"86b38f80-4c2a-4cb5-d011-ba9a4bea273e"},"source":["df_final_ev.query('Act != Pred')"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Text</th>\n","      <th>Act</th>\n","      <th>Pred</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>8</th>\n","      <td>staff resepsionis satpam houskeeping s...</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>15</th>\n","      <td>bisa minta pemandangan gunung</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>22</th>\n","      <td>tolong perhatikan sop jobdesk satpam</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>42</th>\n","      <td>malamnya kena julid satpam</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>47</th>\n","      <td>ada staff khusus jaga keamanan anak kola...</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>73</th>\n","      <td>staff kumpul meja resepsionis</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>80</th>\n","      <td>dipersilakan duduk menikmati welcome dri...</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>122</th>\n","      <td>staff diprotes diam</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>126</th>\n","      <td>staff lupa</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>129</th>\n","      <td>tidak lama petugas menawari menu makan</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>132</th>\n","      <td>pelayanan keramahan terjaga</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>150</th>\n","      <td>staff pelayanan tidak mengecewakan</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>176</th>\n","      <td>komunikatif memberi petunjuk arah tempat wi...</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>180</th>\n","      <td>pelayanan nomor satu</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>206</th>\n","      <td>staff cukup defensif</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>214</th>\n","      <td>staff melayani sopan nama baik</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>215</th>\n","      <td>tamu raja harusnya diberi pelayanan prima bu...</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>221</th>\n","      <td>front office mohon ramah</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>237</th>\n","      <td>sambut front office lempeng</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>244</th>\n","      <td>staff minta maaf</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>255</th>\n","      <td>terima kasih pelayanan prima</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>271</th>\n","      <td>tanggap tidak ada diminta</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                                                  Text  Act  Pred\n","8            staff resepsionis satpam houskeeping s...    1     0\n","15                       bisa minta pemandangan gunung    1     0\n","22                tolong perhatikan sop jobdesk satpam    0     1\n","42                          malamnya kena julid satpam    0     1\n","47         ada staff khusus jaga keamanan anak kola...    1     0\n","73                       staff kumpul meja resepsionis    0     1\n","80         dipersilakan duduk menikmati welcome dri...    1     0\n","122                                staff diprotes diam    0     1\n","126                                         staff lupa    0     1\n","129             tidak lama petugas menawari menu makan    1     0\n","132                        pelayanan keramahan terjaga    0     1\n","150                 staff pelayanan tidak mengecewakan    1     0\n","176     komunikatif memberi petunjuk arah tempat wi...    1     0\n","180                               pelayanan nomor satu    1     0\n","206                               staff cukup defensif    0     1\n","214                     staff melayani sopan nama baik    1     0\n","215    tamu raja harusnya diberi pelayanan prima bu...    0     1\n","221                           front office mohon ramah    0     1\n","237                        sambut front office lempeng    0     1\n","244                                   staff minta maaf    1     0\n","255                       terima kasih pelayanan prima    1     0\n","271                          tanggap tidak ada diminta    1     0"]},"metadata":{},"execution_count":80}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yAYOkbdybVtM","executionInfo":{"status":"ok","timestamp":1632234010224,"user_tz":-420,"elapsed":387,"user":{"displayName":"SIWI CAHYANINGTYAS","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17820712209128539889"}},"outputId":"591ad015-6a67-4142-a6f2-15bce9517ef0"},"source":["len(df_final_ev.query('Act != Pred'))"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["22"]},"metadata":{},"execution_count":81}]},{"cell_type":"markdown","metadata":{"id":"WKf9abfsPLsT"},"source":["# Testing"]},{"cell_type":"code","metadata":{"id":"MyCVnda0PQBp","executionInfo":{"status":"ok","timestamp":1632300488594,"user_tz":-420,"elapsed":1635,"user":{"displayName":"SIWI CAHYANINGTYAS","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17820712209128539889"}}},"source":["model = load_model('/content/drive/My Drive/Thesis/Code/FixModel2/clstm_sentiment_pelayanan_0.911.h5')\n","labels=[\"negative\",\"positive\"]"],"execution_count":69,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":606},"id":"tl1AlOhKPlR8","executionInfo":{"status":"ok","timestamp":1632300488600,"user_tz":-420,"elapsed":11,"user":{"displayName":"SIWI CAHYANINGTYAS","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17820712209128539889"}},"outputId":"709475fe-e321-4286-df18-d3e88e575972"},"source":["df_test = pd.read_excel('/content/drive/My Drive/Thesis/Code/Dataset/Used/result_test.xlsx')\n","df_pelayanan = df_test[df_test[\"used aspect\"]==\"pelayanan\"]\n","df_pelayanan"],"execution_count":70,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>tanggal</th>\n","      <th>id</th>\n","      <th>text</th>\n","      <th>source</th>\n","      <th>aspect</th>\n","      <th>Top kamar Aspects</th>\n","      <th>Unnamed: 6</th>\n","      <th>Unnamed: 7</th>\n","      <th>aspect 1</th>\n","      <th>aspect 2</th>\n","      <th>Scores</th>\n","      <th>true aspect</th>\n","      <th>used aspect</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>40</th>\n","      <td>2020-03-30</td>\n","      <td>200</td>\n","      <td>lockdown covid minta balik uang tidak_bisa</td>\n","      <td>traveloka</td>\n","      <td>pelayanan</td>\n","      <td>pelayanan, hotel</td>\n","      <td>pelayanan</td>\n","      <td>hotel</td>\n","      <td>pelayanan</td>\n","      <td>hotel</td>\n","      <td>[0.931731104850769, 0.019002152606844902]</td>\n","      <td>harga</td>\n","      <td>pelayanan</td>\n","    </tr>\n","    <tr>\n","      <th>192</th>\n","      <td>2021-03-15</td>\n","      <td>112</td>\n","      <td>standar prokes baik</td>\n","      <td>traveloka</td>\n","      <td>pelayanan</td>\n","      <td>pelayanan, restoran</td>\n","      <td>pelayanan</td>\n","      <td>restoran</td>\n","      <td>pelayanan</td>\n","      <td>restoran</td>\n","      <td>[0.4917411208152771, 0.27120399475097656]</td>\n","      <td>hotel</td>\n","      <td>pelayanan</td>\n","    </tr>\n","    <tr>\n","      <th>194</th>\n","      <td>2020-01-15</td>\n","      <td>284</td>\n","      <td>tidak_ada canopy drop penumpang</td>\n","      <td>tiket</td>\n","      <td>pelayanan</td>\n","      <td>pelayanan, kamar</td>\n","      <td>pelayanan</td>\n","      <td>kamar</td>\n","      <td>pelayanan</td>\n","      <td>kamar</td>\n","      <td>[0.5482982397079468, 0.1669865846633911]</td>\n","      <td>hotel</td>\n","      <td>pelayanan</td>\n","    </tr>\n","    <tr>\n","      <th>195</th>\n","      <td>2020-10-02</td>\n","      <td>360</td>\n","      <td>prokes bagus sesuai anjuran pemerintah</td>\n","      <td>booking</td>\n","      <td>pelayanan</td>\n","      <td>pelayanan, harga</td>\n","      <td>pelayanan</td>\n","      <td>harga</td>\n","      <td>pelayanan</td>\n","      <td>harga</td>\n","      <td>[0.7919690012931824, 0.08094590157270432]</td>\n","      <td>hotel</td>\n","      <td>pelayanan</td>\n","    </tr>\n","    <tr>\n","      <th>681</th>\n","      <td>2020-11-29</td>\n","      <td>269</td>\n","      <td>semua staff ramah</td>\n","      <td>tiket</td>\n","      <td>pelayanan</td>\n","      <td>pelayanan, harga</td>\n","      <td>pelayanan</td>\n","      <td>harga</td>\n","      <td>pelayanan</td>\n","      <td>harga</td>\n","      <td>[0.9999263286590576, 3.7817790143890306e-05]</td>\n","      <td>pelayanan</td>\n","      <td>pelayanan</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>951</th>\n","      <td>2020-01-06</td>\n","      <td>212</td>\n","      <td>semua staff ramah</td>\n","      <td>traveloka</td>\n","      <td>pelayanan</td>\n","      <td>pelayanan, harga</td>\n","      <td>pelayanan</td>\n","      <td>harga</td>\n","      <td>pelayanan</td>\n","      <td>harga</td>\n","      <td>[0.9999263286590576, 3.7817790143890306e-05]</td>\n","      <td>pelayanan</td>\n","      <td>pelayanan</td>\n","    </tr>\n","    <tr>\n","      <th>952</th>\n","      <td>2020-09-27</td>\n","      <td>166</td>\n","      <td>staff tidak_ramah</td>\n","      <td>traveloka</td>\n","      <td>pelayanan</td>\n","      <td>pelayanan, harga</td>\n","      <td>pelayanan</td>\n","      <td>harga</td>\n","      <td>pelayanan</td>\n","      <td>harga</td>\n","      <td>[0.9999969005584717, 1.0987582754751202e-06]</td>\n","      <td>pelayanan</td>\n","      <td>pelayanan</td>\n","    </tr>\n","    <tr>\n","      <th>953</th>\n","      <td>2020-08-04</td>\n","      <td>394</td>\n","      <td>room_service cepat respon</td>\n","      <td>agoda</td>\n","      <td>pelayanan</td>\n","      <td>pelayanan, harga</td>\n","      <td>pelayanan</td>\n","      <td>harga</td>\n","      <td>pelayanan</td>\n","      <td>harga</td>\n","      <td>[0.9937126040458679, 0.002379485871642828]</td>\n","      <td>pelayanan</td>\n","      <td>pelayanan</td>\n","    </tr>\n","    <tr>\n","      <th>954</th>\n","      <td>2021-04-17</td>\n","      <td>241</td>\n","      <td>sampai hotel sambut dibantu bawa barang</td>\n","      <td>tiket</td>\n","      <td>pelayanan</td>\n","      <td>pelayanan, hotel</td>\n","      <td>pelayanan</td>\n","      <td>hotel</td>\n","      <td>pelayanan</td>\n","      <td>hotel</td>\n","      <td>[0.9816303849220276, 0.010960720479488373]</td>\n","      <td>pelayanan</td>\n","      <td>pelayanan</td>\n","    </tr>\n","    <tr>\n","      <th>955</th>\n","      <td>2020-09-13</td>\n","      <td>328</td>\n","      <td>tunggu lama refill</td>\n","      <td>booking</td>\n","      <td>pelayanan</td>\n","      <td>pelayanan, hotel</td>\n","      <td>pelayanan</td>\n","      <td>hotel</td>\n","      <td>pelayanan</td>\n","      <td>hotel</td>\n","      <td>[0.9961428046226501, 0.0016113521996885538]</td>\n","      <td>pelayanan</td>\n","      <td>pelayanan</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>279 rows Ã— 13 columns</p>\n","</div>"],"text/plain":["       tanggal   id  ... true aspect used aspect\n","40  2020-03-30  200  ...       harga   pelayanan\n","192 2021-03-15  112  ...       hotel   pelayanan\n","194 2020-01-15  284  ...       hotel   pelayanan\n","195 2020-10-02  360  ...       hotel   pelayanan\n","681 2020-11-29  269  ...   pelayanan   pelayanan\n","..         ...  ...  ...         ...         ...\n","951 2020-01-06  212  ...   pelayanan   pelayanan\n","952 2020-09-27  166  ...   pelayanan   pelayanan\n","953 2020-08-04  394  ...   pelayanan   pelayanan\n","954 2021-04-17  241  ...   pelayanan   pelayanan\n","955 2020-09-13  328  ...   pelayanan   pelayanan\n","\n","[279 rows x 13 columns]"]},"metadata":{},"execution_count":70}]},{"cell_type":"code","metadata":{"id":"jSx611diP6VS","executionInfo":{"status":"ok","timestamp":1632300489754,"user_tz":-420,"elapsed":456,"user":{"displayName":"SIWI CAHYANINGTYAS","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17820712209128539889"}}},"source":["data_test = df_pelayanan[\"text\"]\n","list_test = data_test.tolist()\n","\n","seq = tokenizer.texts_to_sequences(list_test)\n","padded = pad_sequences(seq, maxlen=max_seq_len)\n","pred = model.predict(padded)"],"execution_count":71,"outputs":[]},{"cell_type":"code","metadata":{"id":"MyHTy3kQVx1Q","executionInfo":{"status":"ok","timestamp":1632300489755,"user_tz":-420,"elapsed":6,"user":{"displayName":"SIWI CAHYANINGTYAS","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17820712209128539889"}}},"source":["y_test = []\n","for x in pred :\n","  y = labels[np.argmax(x)]\n","  # print(y)\n","  y_test += [y]"],"execution_count":72,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":759},"id":"NqY7eCGsQs45","executionInfo":{"status":"ok","timestamp":1632300490915,"user_tz":-420,"elapsed":14,"user":{"displayName":"SIWI CAHYANINGTYAS","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17820712209128539889"}},"outputId":"20af596a-fb22-4ee1-d197-fb486389db82"},"source":["df_pelayanan[\"sentiment\"]=y_test\n","df_pelayanan"],"execution_count":73,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:1: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \"\"\"Entry point for launching an IPython kernel.\n"]},{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>tanggal</th>\n","      <th>id</th>\n","      <th>text</th>\n","      <th>source</th>\n","      <th>aspect</th>\n","      <th>Top kamar Aspects</th>\n","      <th>Unnamed: 6</th>\n","      <th>Unnamed: 7</th>\n","      <th>aspect 1</th>\n","      <th>aspect 2</th>\n","      <th>Scores</th>\n","      <th>true aspect</th>\n","      <th>used aspect</th>\n","      <th>sentiment</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>40</th>\n","      <td>2020-03-30</td>\n","      <td>200</td>\n","      <td>lockdown covid minta balik uang tidak_bisa</td>\n","      <td>traveloka</td>\n","      <td>pelayanan</td>\n","      <td>pelayanan, hotel</td>\n","      <td>pelayanan</td>\n","      <td>hotel</td>\n","      <td>pelayanan</td>\n","      <td>hotel</td>\n","      <td>[0.931731104850769, 0.019002152606844902]</td>\n","      <td>harga</td>\n","      <td>pelayanan</td>\n","      <td>negative</td>\n","    </tr>\n","    <tr>\n","      <th>192</th>\n","      <td>2021-03-15</td>\n","      <td>112</td>\n","      <td>standar prokes baik</td>\n","      <td>traveloka</td>\n","      <td>pelayanan</td>\n","      <td>pelayanan, restoran</td>\n","      <td>pelayanan</td>\n","      <td>restoran</td>\n","      <td>pelayanan</td>\n","      <td>restoran</td>\n","      <td>[0.4917411208152771, 0.27120399475097656]</td>\n","      <td>hotel</td>\n","      <td>pelayanan</td>\n","      <td>positive</td>\n","    </tr>\n","    <tr>\n","      <th>194</th>\n","      <td>2020-01-15</td>\n","      <td>284</td>\n","      <td>tidak_ada canopy drop penumpang</td>\n","      <td>tiket</td>\n","      <td>pelayanan</td>\n","      <td>pelayanan, kamar</td>\n","      <td>pelayanan</td>\n","      <td>kamar</td>\n","      <td>pelayanan</td>\n","      <td>kamar</td>\n","      <td>[0.5482982397079468, 0.1669865846633911]</td>\n","      <td>hotel</td>\n","      <td>pelayanan</td>\n","      <td>negative</td>\n","    </tr>\n","    <tr>\n","      <th>195</th>\n","      <td>2020-10-02</td>\n","      <td>360</td>\n","      <td>prokes bagus sesuai anjuran pemerintah</td>\n","      <td>booking</td>\n","      <td>pelayanan</td>\n","      <td>pelayanan, harga</td>\n","      <td>pelayanan</td>\n","      <td>harga</td>\n","      <td>pelayanan</td>\n","      <td>harga</td>\n","      <td>[0.7919690012931824, 0.08094590157270432]</td>\n","      <td>hotel</td>\n","      <td>pelayanan</td>\n","      <td>positive</td>\n","    </tr>\n","    <tr>\n","      <th>681</th>\n","      <td>2020-11-29</td>\n","      <td>269</td>\n","      <td>semua staff ramah</td>\n","      <td>tiket</td>\n","      <td>pelayanan</td>\n","      <td>pelayanan, harga</td>\n","      <td>pelayanan</td>\n","      <td>harga</td>\n","      <td>pelayanan</td>\n","      <td>harga</td>\n","      <td>[0.9999263286590576, 3.7817790143890306e-05]</td>\n","      <td>pelayanan</td>\n","      <td>pelayanan</td>\n","      <td>positive</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>951</th>\n","      <td>2020-01-06</td>\n","      <td>212</td>\n","      <td>semua staff ramah</td>\n","      <td>traveloka</td>\n","      <td>pelayanan</td>\n","      <td>pelayanan, harga</td>\n","      <td>pelayanan</td>\n","      <td>harga</td>\n","      <td>pelayanan</td>\n","      <td>harga</td>\n","      <td>[0.9999263286590576, 3.7817790143890306e-05]</td>\n","      <td>pelayanan</td>\n","      <td>pelayanan</td>\n","      <td>positive</td>\n","    </tr>\n","    <tr>\n","      <th>952</th>\n","      <td>2020-09-27</td>\n","      <td>166</td>\n","      <td>staff tidak_ramah</td>\n","      <td>traveloka</td>\n","      <td>pelayanan</td>\n","      <td>pelayanan, harga</td>\n","      <td>pelayanan</td>\n","      <td>harga</td>\n","      <td>pelayanan</td>\n","      <td>harga</td>\n","      <td>[0.9999969005584717, 1.0987582754751202e-06]</td>\n","      <td>pelayanan</td>\n","      <td>pelayanan</td>\n","      <td>negative</td>\n","    </tr>\n","    <tr>\n","      <th>953</th>\n","      <td>2020-08-04</td>\n","      <td>394</td>\n","      <td>room_service cepat respon</td>\n","      <td>agoda</td>\n","      <td>pelayanan</td>\n","      <td>pelayanan, harga</td>\n","      <td>pelayanan</td>\n","      <td>harga</td>\n","      <td>pelayanan</td>\n","      <td>harga</td>\n","      <td>[0.9937126040458679, 0.002379485871642828]</td>\n","      <td>pelayanan</td>\n","      <td>pelayanan</td>\n","      <td>positive</td>\n","    </tr>\n","    <tr>\n","      <th>954</th>\n","      <td>2021-04-17</td>\n","      <td>241</td>\n","      <td>sampai hotel sambut dibantu bawa barang</td>\n","      <td>tiket</td>\n","      <td>pelayanan</td>\n","      <td>pelayanan, hotel</td>\n","      <td>pelayanan</td>\n","      <td>hotel</td>\n","      <td>pelayanan</td>\n","      <td>hotel</td>\n","      <td>[0.9816303849220276, 0.010960720479488373]</td>\n","      <td>pelayanan</td>\n","      <td>pelayanan</td>\n","      <td>positive</td>\n","    </tr>\n","    <tr>\n","      <th>955</th>\n","      <td>2020-09-13</td>\n","      <td>328</td>\n","      <td>tunggu lama refill</td>\n","      <td>booking</td>\n","      <td>pelayanan</td>\n","      <td>pelayanan, hotel</td>\n","      <td>pelayanan</td>\n","      <td>hotel</td>\n","      <td>pelayanan</td>\n","      <td>hotel</td>\n","      <td>[0.9961428046226501, 0.0016113521996885538]</td>\n","      <td>pelayanan</td>\n","      <td>pelayanan</td>\n","      <td>negative</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>279 rows Ã— 14 columns</p>\n","</div>"],"text/plain":["       tanggal   id  ... used aspect sentiment\n","40  2020-03-30  200  ...   pelayanan  negative\n","192 2021-03-15  112  ...   pelayanan  positive\n","194 2020-01-15  284  ...   pelayanan  negative\n","195 2020-10-02  360  ...   pelayanan  positive\n","681 2020-11-29  269  ...   pelayanan  positive\n","..         ...  ...  ...         ...       ...\n","951 2020-01-06  212  ...   pelayanan  positive\n","952 2020-09-27  166  ...   pelayanan  negative\n","953 2020-08-04  394  ...   pelayanan  positive\n","954 2021-04-17  241  ...   pelayanan  positive\n","955 2020-09-13  328  ...   pelayanan  negative\n","\n","[279 rows x 14 columns]"]},"metadata":{},"execution_count":73}]},{"cell_type":"code","metadata":{"id":"dT-OivNtWD87","executionInfo":{"status":"ok","timestamp":1632301099588,"user_tz":-420,"elapsed":546,"user":{"displayName":"SIWI CAHYANINGTYAS","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"17820712209128539889"}}},"source":["df_result = pd.read_excel('/content/drive/My Drive/Thesis/Code/Dataset/Used/all_result_test.xlsx')\n","df_append = df_result.append(df_pelayanan)\n","df_append.to_excel('/content/drive/My Drive/Thesis/Code/Dataset/Used/all_result_test.xlsx')"],"execution_count":75,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"QAWMLTwmZ5Cb"},"source":["# Draft"]},{"cell_type":"markdown","metadata":{"id":"6hT6gKM48NOn"},"source":["## Evaluate Sentiment"]},{"cell_type":"code","metadata":{"id":"GZzPTe_oVF_p","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1625394909264,"user_tz":-420,"elapsed":510,"user":{"displayName":"SIWI CAHYANINGTYAS","photoUrl":"","userId":"17820712209128539889"}},"outputId":"f77ee90a-a9e6-47d6-93c6-b2fb6747b30a"},"source":["ev_sent = model.predict_classes(X_test)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/keras/engine/sequential.py:450: UserWarning: `model.predict_classes()` is deprecated and will be removed after 2021-01-01. Please use instead:* `np.argmax(model.predict(x), axis=-1)`,   if your model does multi-class classification   (e.g. if it uses a `softmax` last-layer activation).* `(model.predict(x) > 0.5).astype(\"int32\")`,   if your model does binary classification   (e.g. if it uses a `sigmoid` last-layer activation).\n","  warnings.warn('`model.predict_classes()` is deprecated and '\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"JI9ZyHH-8cYY"},"source":["decode_sent = np.argmax(Y_test, axis=1)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"JSlN5TIH8pCG"},"source":["lab_sent = [\"negatif\",\"positif\"]"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"MehYEqFrAUpc"},"source":["def conf_matrix(Y_act, Y_pred, lab):\n","    confusion_mtx = confusion_matrix(Y_act, Y_pred)\n","    plt.figure(figsize=(10,8))\n","    sns.heatmap(confusion_mtx, annot=True, fmt=\"d\", xticklabels=lab, yticklabels=lab)\n","    plt.ylabel(\"Actual\")\n","    plt.xlabel(\"Predicted\")\n","    plt.show()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":496},"id":"ZTR8GOUa9TJb","executionInfo":{"status":"ok","timestamp":1625394910924,"user_tz":-420,"elapsed":1129,"user":{"displayName":"SIWI CAHYANINGTYAS","photoUrl":"","userId":"17820712209128539889"}},"outputId":"5f35cc2a-ccf8-44a7-82ee-756305c6331f"},"source":["conf_matrix(ev_sent, decode_sent, lab_sent)"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 720x576 with 2 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"kLeStDruKN9l","colab":{"base_uri":"https://localhost:8080/","height":607},"executionInfo":{"status":"ok","timestamp":1625394910925,"user_tz":-420,"elapsed":44,"user":{"displayName":"SIWI CAHYANINGTYAS","photoUrl":"","userId":"17820712209128539889"}},"outputId":"68d028be-0d29-409c-c58e-a5d289b4a4f3"},"source":["import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","%matplotlib inline\n","import seaborn as sns\n","from sklearn.metrics import confusion_matrix\n","\n","def plot_cm(Y_act, y_pred, lab, figsize=(10,10)):\n","    cm = confusion_matrix(Y_act, y_pred, labels=np.unique(Y_act))\n","    cm_sum = np.sum(cm, axis=1, keepdims=True)\n","    cm_perc = cm / cm_sum.astype(float) * 100\n","    annot = np.empty_like(cm).astype(str)\n","    nrows, ncols = cm.shape\n","    for i in range(nrows):\n","        for j in range(ncols):\n","            c = cm[i, j]\n","            p = cm_perc[i, j]\n","            if i == j:\n","                s = cm_sum[i]\n","                annot[i, j] = '%.1f%%\\n%d/%d' % (p, c, s)\n","                # annot[i,j] = '%.1f%%' % (p)\n","            # elif c == 0:\n","            #     annot[i, j] = ''\n","            else:\n","                annot[i, j] = '%.1f%%\\n%d' % (p, c)\n","                # annot[i, j] = '%.1f%%' % (p)\n","    cm = pd.DataFrame(cm_perc, index=np.unique(Y_act), columns=np.unique(Y_act))\n","    cm.index.name = 'Actual'\n","    cm.columns.name = 'Predicted'\n","    fig, ax = plt.subplots(figsize=figsize)\n","    sns.heatmap(cm, cmap= \"YlGnBu\", annot=annot, fmt='', ax=ax, xticklabels=lab, yticklabels=lab)\n","    # sns.heatmap(uniform_data,\n","    #         cbar_kws={'format': '%.0f%%', 'ticks': [0, 100]},\n","    #         vmax=100,\n","    #         vmin=0)\n","plot_cm(ev_sent, decode_sent, lab_sent)"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 720x720 with 2 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XgjzN7Zi9ZCI","executionInfo":{"status":"ok","timestamp":1625394910927,"user_tz":-420,"elapsed":42,"user":{"displayName":"SIWI CAHYANINGTYAS","photoUrl":"","userId":"17820712209128539889"}},"outputId":"8f527c92-d64c-4096-fede-61d714d7d90e"},"source":["from sklearn.metrics import accuracy_score\n","accuracy_score(ev_sent, decode_sent)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.900709219858156"]},"metadata":{"tags":[]},"execution_count":148}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oKEJidKP9kSa","executionInfo":{"status":"ok","timestamp":1625394910928,"user_tz":-420,"elapsed":36,"user":{"displayName":"SIWI CAHYANINGTYAS","photoUrl":"","userId":"17820712209128539889"}},"outputId":"92ae9ca2-9adf-4ae8-cf76-a7f62fc83154"},"source":["from sklearn.metrics import classification_report\n","print(classification_report(ev_sent, decode_sent))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["              precision    recall  f1-score   support\n","\n","           0       0.90      0.90      0.90       143\n","           1       0.90      0.90      0.90       139\n","\n","    accuracy                           0.90       282\n","   macro avg       0.90      0.90      0.90       282\n","weighted avg       0.90      0.90      0.90       282\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"V_4mHIBD9sM1","executionInfo":{"status":"ok","timestamp":1625394910930,"user_tz":-420,"elapsed":32,"user":{"displayName":"SIWI CAHYANINGTYAS","photoUrl":"","userId":"17820712209128539889"}},"outputId":"fc519f65-1fe6-4b18-d2b3-bba33c8dcdb2"},"source":["from sklearn.metrics import precision_score, \\\n","    recall_score, confusion_matrix, classification_report, \\\n","    accuracy_score, f1_score\n","\n","print('Accuracy:', accuracy_score(ev_sent, decode_sent))\n","print('F1 score:', f1_score(ev_sent, decode_sent, average='macro'))\n","print('Recall:', recall_score(ev_sent, decode_sent, average='macro'))\n","print('Precision:', precision_score(ev_sent, decode_sent, average='macro'))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Accuracy: 0.900709219858156\n","F1 score: 0.9006892388187352\n","Recall: 0.9006892388187352\n","Precision: 0.9006892388187352\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":281},"id":"8jzXTeea90VA","executionInfo":{"status":"ok","timestamp":1625394910931,"user_tz":-420,"elapsed":28,"user":{"displayName":"SIWI CAHYANINGTYAS","photoUrl":"","userId":"17820712209128539889"}},"outputId":"ed5b9f02-f7b4-429d-8b52-35be1b16eb87"},"source":["plt.title('Loss')\n","plt.plot(history_BLSTM.history['loss'], label='train')\n","plt.plot(history_BLSTM.history['val_loss'], label='test')\n","plt.legend()\n","plt.show();"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":281},"id":"YbTEzFpR9_pG","executionInfo":{"status":"ok","timestamp":1625394911674,"user_tz":-420,"elapsed":769,"user":{"displayName":"SIWI CAHYANINGTYAS","photoUrl":"","userId":"17820712209128539889"}},"outputId":"0ae82883-2aa7-49dc-9a73-e97e03073ea4"},"source":["plt.title('Accuracy')\n","plt.plot(history_BLSTM.history['acc'], label='train')\n","plt.plot(history_BLSTM.history['val_acc'], label='test')\n","plt.legend()\n","plt.show();"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"1zAaGMepBh__"},"source":["## Testing"]},{"cell_type":"code","metadata":{"id":"fSIQ_K3rU9yj"},"source":["model = m_clstm\n","labels=[\"negative\",\"positive\"]"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":202},"id":"DP_MLui3VBG8","executionInfo":{"status":"ok","timestamp":1625471122336,"user_tz":-420,"elapsed":566,"user":{"displayName":"SIWI CAHYANINGTYAS","photoUrl":"","userId":"17820712209128539889"}},"outputId":"0cc58b75-a5b3-4b9b-f178-63d0d787438c"},"source":["df_testing = pd.read_excel('/content/drive/My Drive/Thesis/Code/Dataset/final_data_test.xlsx')\n","df_pelayanan = df_testing[df_testing[\"aspect\"]==\"pelayanan\"]\n","df_pelayanan.head()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>tanggal</th>\n","      <th>id</th>\n","      <th>text</th>\n","      <th>source</th>\n","      <th>aspect</th>\n","      <th>sentiment</th>\n","      <th>Unnamed: 6</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>556</th>\n","      <td>2021-06-27</td>\n","      <td>2</td>\n","      <td>staff ramah</td>\n","      <td>pegipegi</td>\n","      <td>pelayanan</td>\n","      <td>positive</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>557</th>\n","      <td>2021-06-27</td>\n","      <td>2</td>\n","      <td>pelayanan oke</td>\n","      <td>pegipegi</td>\n","      <td>pelayanan</td>\n","      <td>positive</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>558</th>\n","      <td>2021-06-18</td>\n","      <td>3</td>\n","      <td>staff ramah</td>\n","      <td>pegipegi</td>\n","      <td>pelayanan</td>\n","      <td>positive</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>559</th>\n","      <td>2021-06-16</td>\n","      <td>4</td>\n","      <td>pelayanan ramah</td>\n","      <td>pegipegi</td>\n","      <td>pelayanan</td>\n","      <td>positive</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>560</th>\n","      <td>2021-06-02</td>\n","      <td>5</td>\n","      <td>sederhana prokes bagus</td>\n","      <td>pegipegi</td>\n","      <td>pelayanan</td>\n","      <td>positive</td>\n","      <td>NaN</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["       tanggal  id                    text  ...     aspect sentiment Unnamed: 6\n","556 2021-06-27   2             staff ramah  ...  pelayanan  positive        NaN\n","557 2021-06-27   2           pelayanan oke  ...  pelayanan  positive        NaN\n","558 2021-06-18   3             staff ramah  ...  pelayanan  positive        NaN\n","559 2021-06-16   4         pelayanan ramah  ...  pelayanan  positive        NaN\n","560 2021-06-02   5  sederhana prokes bagus  ...  pelayanan  positive        NaN\n","\n","[5 rows x 7 columns]"]},"metadata":{"tags":[]},"execution_count":77}]},{"cell_type":"code","metadata":{"id":"LkRA9fxYVEU5"},"source":["data_test = df_pelayanan[\"text\"]\n","list_test = data_test.tolist()\n","\n","seq = tokenizer.texts_to_sequences(list_test)\n","padded = pad_sequences(seq, maxlen=max_seq_len)\n","pred = model.predict(padded)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jdRc5NQnFzzN","executionInfo":{"status":"ok","timestamp":1625471122341,"user_tz":-420,"elapsed":51,"user":{"displayName":"SIWI CAHYANINGTYAS","photoUrl":"","userId":"17820712209128539889"}},"outputId":"06a3a0ff-de50-423b-a376-e19b70d2f7c0"},"source":["y_test = []\n","for x in pred :\n","  y = labels[np.argmax(x)]\n","  print(y)\n","  y_test += [y]"],"execution_count":null,"outputs":[{"output_type":"stream","text":["positive\n","positive\n","positive\n","positive\n","positive\n","positive\n","negative\n","positive\n","positive\n","positive\n","positive\n","negative\n","positive\n","positive\n","negative\n","positive\n","positive\n","positive\n","negative\n","positive\n","positive\n","positive\n","positive\n","positive\n","positive\n","positive\n","positive\n","positive\n","positive\n","positive\n","positive\n","positive\n","positive\n","positive\n","positive\n","positive\n","negative\n","negative\n","negative\n","positive\n","positive\n","positive\n","positive\n","positive\n","positive\n","positive\n","positive\n","positive\n","positive\n","positive\n","positive\n","positive\n","positive\n","negative\n","negative\n","positive\n","negative\n","positive\n","positive\n","positive\n","positive\n","positive\n","positive\n","negative\n","positive\n","positive\n","positive\n","positive\n","positive\n","positive\n","positive\n","positive\n","positive\n","positive\n","positive\n","positive\n","positive\n","positive\n","positive\n","negative\n","positive\n","positive\n","positive\n","positive\n","positive\n","positive\n","positive\n","positive\n","positive\n","positive\n","positive\n","positive\n","positive\n","positive\n","negative\n","positive\n","positive\n","positive\n","positive\n","positive\n","positive\n","positive\n","positive\n","positive\n","positive\n","positive\n","positive\n","positive\n","positive\n","positive\n","positive\n","positive\n","positive\n","positive\n","negative\n","positive\n","positive\n","positive\n","negative\n","positive\n","positive\n","positive\n","positive\n","positive\n","positive\n","positive\n","positive\n","negative\n","positive\n","positive\n","positive\n","positive\n","positive\n","positive\n","positive\n","negative\n","positive\n","positive\n","positive\n","positive\n","positive\n","positive\n","positive\n","positive\n","positive\n","positive\n","negative\n","negative\n","positive\n","positive\n","positive\n","positive\n","negative\n","positive\n","negative\n","positive\n","positive\n","positive\n","positive\n","positive\n","positive\n","negative\n","positive\n","positive\n","positive\n","positive\n","negative\n","positive\n","positive\n","positive\n","positive\n","positive\n","positive\n","positive\n","positive\n","positive\n","positive\n","negative\n","positive\n","positive\n","positive\n","negative\n","positive\n","positive\n","positive\n","positive\n","positive\n","positive\n","positive\n","positive\n","negative\n","positive\n","positive\n","positive\n","positive\n","positive\n","positive\n","positive\n","positive\n","positive\n","positive\n","positive\n","negative\n","negative\n","positive\n","positive\n","positive\n","negative\n","positive\n","positive\n","positive\n","positive\n","positive\n","negative\n","positive\n","positive\n","positive\n","positive\n","negative\n","positive\n","negative\n","positive\n","positive\n","positive\n","positive\n","positive\n","positive\n","negative\n","positive\n","positive\n","positive\n","positive\n","positive\n","positive\n","positive\n","positive\n","negative\n","positive\n","positive\n","positive\n","positive\n","positive\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":414},"id":"rkHfRNEAJ4JA","executionInfo":{"status":"ok","timestamp":1625471122343,"user_tz":-420,"elapsed":50,"user":{"displayName":"SIWI CAHYANINGTYAS","photoUrl":"","userId":"17820712209128539889"}},"outputId":"4011e4a4-16ef-4fe1-a201-de41ea19c2bb"},"source":["df_testing[232:307]"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>tanggal</th>\n","      <th>id</th>\n","      <th>text</th>\n","      <th>source</th>\n","      <th>aspect</th>\n","      <th>sentiment</th>\n","      <th>Unnamed: 6</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>232</th>\n","      <td>2020-12-08</td>\n","      <td>136</td>\n","      <td>lampu redup kamar_mandi</td>\n","      <td>traveloka</td>\n","      <td>kamar</td>\n","      <td>NaN</td>\n","      <td>negative</td>\n","    </tr>\n","    <tr>\n","      <th>233</th>\n","      <td>2020-12-08</td>\n","      <td>136</td>\n","      <td>handle shower lepas</td>\n","      <td>traveloka</td>\n","      <td>kamar</td>\n","      <td>NaN</td>\n","      <td>positive</td>\n","    </tr>\n","    <tr>\n","      <th>234</th>\n","      <td>2020-12-08</td>\n","      <td>136</td>\n","      <td>gantungan tisu lepas</td>\n","      <td>traveloka</td>\n","      <td>kamar</td>\n","      <td>NaN</td>\n","      <td>negative</td>\n","    </tr>\n","    <tr>\n","      <th>235</th>\n","      <td>2020-12-08</td>\n","      <td>136</td>\n","      <td>kamar_mandi bau lembab</td>\n","      <td>traveloka</td>\n","      <td>kamar</td>\n","      <td>NaN</td>\n","      <td>negative</td>\n","    </tr>\n","    <tr>\n","      <th>236</th>\n","      <td>2020-12-07</td>\n","      <td>136</td>\n","      <td>kamar disediakan perlengkapan sholat lengkap q...</td>\n","      <td>traveloka</td>\n","      <td>kamar</td>\n","      <td>NaN</td>\n","      <td>positive</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>302</th>\n","      <td>2020-01-05</td>\n","      <td>213</td>\n","      <td>toilet bersih</td>\n","      <td>traveloka</td>\n","      <td>kamar</td>\n","      <td>NaN</td>\n","      <td>positive</td>\n","    </tr>\n","    <tr>\n","      <th>303</th>\n","      <td>2020-01-01</td>\n","      <td>216</td>\n","      <td>nyaman fasilitas sholat tersedia baik dalam kamar</td>\n","      <td>traveloka</td>\n","      <td>kamar</td>\n","      <td>NaN</td>\n","      <td>positive</td>\n","    </tr>\n","    <tr>\n","      <th>304</th>\n","      <td>2021-06-21</td>\n","      <td>224</td>\n","      <td>kamar_mandi kotor tempat tidur banyak kutu</td>\n","      <td>tiket</td>\n","      <td>kamar</td>\n","      <td>NaN</td>\n","      <td>negative</td>\n","    </tr>\n","    <tr>\n","      <th>305</th>\n","      <td>2021-06-16</td>\n","      <td>227</td>\n","      <td>kamar bersih</td>\n","      <td>tiket</td>\n","      <td>kamar</td>\n","      <td>NaN</td>\n","      <td>positive</td>\n","    </tr>\n","    <tr>\n","      <th>306</th>\n","      <td>2021-06-10</td>\n","      <td>230</td>\n","      <td>kamar bersih</td>\n","      <td>tiket</td>\n","      <td>kamar</td>\n","      <td>NaN</td>\n","      <td>positive</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>75 rows Ã— 7 columns</p>\n","</div>"],"text/plain":["       tanggal   id  ... sentiment Unnamed: 6\n","232 2020-12-08  136  ...       NaN   negative\n","233 2020-12-08  136  ...       NaN   positive\n","234 2020-12-08  136  ...       NaN   negative\n","235 2020-12-08  136  ...       NaN   negative\n","236 2020-12-07  136  ...       NaN   positive\n","..         ...  ...  ...       ...        ...\n","302 2020-01-05  213  ...       NaN   positive\n","303 2020-01-01  216  ...       NaN   positive\n","304 2021-06-21  224  ...       NaN   negative\n","305 2021-06-16  227  ...       NaN   positive\n","306 2021-06-10  230  ...       NaN   positive\n","\n","[75 rows x 7 columns]"]},"metadata":{"tags":[]},"execution_count":80}]},{"cell_type":"code","metadata":{"id":"b6ZCYq6sGP7m"},"source":["# df_pelayanan.to_excel(r'/content/drive/My Drive/Thesis/Code/Dataset/data_test.xlsx', index = False, startrow=232)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"aRPndZReHeIf"},"source":[""],"execution_count":null,"outputs":[]}]}